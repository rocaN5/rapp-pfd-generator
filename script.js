//A- Global variables

let currentRappGeneratorType = 1;

const onLoad = document.querySelectorAll('.onLoad')
const onLoadItem = document.querySelectorAll('.onLoadItem')
const onLoadMenu = document.querySelectorAll(".onLoadMenu")
const onLoadText = document.querySelectorAll(".onLoadText")

const currentGeneratorType_title = document.getElementById("currentGeneratorType-title");
const currentGeneratorType_selection = document.querySelectorAll("input.currentGeneratorType-selection");

//A- Global variables END

//~ LOAD
window.onload = () => {
  showMenu()
  setTimeout(() => {
    const loadingWrapper = document.querySelector(".loadingWrapper")
    const loadingBlock = document.querySelector(".loadingBlock")
    const loadingBlockBlur = document.querySelector(".loadingBlock-blur")
    loadingBlock.style.filter = "blur(200px)"
    loadingBlockBlur.style.filter = "blur(200px)"
    hideMenu()
    setTimeout(() => {
      loadingWrapper.remove()
      setTimeout(() => {
        freshLoading()
      }, 50);
    }, 500);
  }, 50);
};

function freshLoading(){
  onLoadItem.forEach(loadingItem =>{
    loadingItem.classList.remove("onLoadItem")
  })
  onLoad.forEach(loadingItem => {
    loadingItem.classList.remove("onLoad")
  });
  onLoadMenu.forEach(loadingItem => {
    loadingItem.classList.remove("onLoadMenu")
  });
  onLoadText.forEach(loadingItem => {
    loadingItem.classList.remove("onLoadText")
  });
}
//~ LOAD END 

//~ CANVAS textarea overlay

const textAreaOverLay__textarea = document.querySelector('textarea.allOrders');
const textAreaOverLay__canvas = document.createElement('canvas');
const textAreaOverLay__ctx = textAreaOverLay__canvas.getContext('2d');

textAreaOverLay__canvas.style.position = 'absolute';
textAreaOverLay__canvas.style.pointerEvents = 'none';
textAreaOverLay__canvas.style.top = textAreaOverLay__textarea.offsetTop + 'px';
textAreaOverLay__canvas.style.left = textAreaOverLay__textarea.offsetLeft + 'px';

function textAreaOverLay__updateCanvas() {
    textAreaOverLay__canvas.width = textAreaOverLay__textarea.clientWidth;
    textAreaOverLay__canvas.height = textAreaOverLay__textarea.clientHeight;
    textAreaOverLay__ctx.clearRect(0, 0, textAreaOverLay__canvas.width, textAreaOverLay__canvas.height);
    
    const text = textAreaOverLay__textarea.value;
    const lines = text.split('\n');
    const fontSize = parseInt(window.getComputedStyle(textAreaOverLay__textarea).fontSize);
    const lineHeight = fontSize * 1.2;
    const scrollTop = textAreaOverLay__textarea.scrollTop;
    const startY = 14 - scrollTop;
    textAreaOverLay__ctx.font = `${fontSize}px ${window.getComputedStyle(textAreaOverLay__textarea).fontFamily}`;
    textAreaOverLay__ctx.textBaseline = 'top';
    
    let y = startY;
    for (const line of lines) {
        if (y + lineHeight > 0 && y < textAreaOverLay__canvas.height) { // –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–∏–¥–∏–º—ã–µ —Å—Ç—Ä–æ–∫–∏
            const words = line.split(' ');
            let x = 10; // Padding
            let firstWordColor = '#00ff68';
            let secondWordColor = '#ccff00';
            let otherWordsColor = '#ffffff';
            
            if (/^(F0254|0|72|YP)/.test(line)) {
                firstWordColor = '#ccff00';
                secondWordColor = '#fff';
                otherWordsColor = '#fff';
            } else if (/^(F1254|FA254|F3000000000)/.test(line)) {
                firstWordColor = '#00dcff';
                secondWordColor = '#fff';
                otherWordsColor = '#fff';
            }
            
            words.forEach((word, index) => {
                if (index === 0) textAreaOverLay__ctx.fillStyle = firstWordColor;
                else if (index === 1) textAreaOverLay__ctx.fillStyle = secondWordColor;
                else textAreaOverLay__ctx.fillStyle = otherWordsColor;
                
                textAreaOverLay__ctx.shadowColor = textAreaOverLay__ctx.fillStyle;
                textAreaOverLay__ctx.shadowBlur = 10;
                textAreaOverLay__ctx.fillText(word, x, y);
                x += textAreaOverLay__ctx.measureText(word + ' ').width;
            });
        }
        y += lineHeight;
    }
}
textAreaOverLay__textarea.parentNode.insertBefore(textAreaOverLay__canvas, textAreaOverLay__textarea.nextSibling);
textAreaOverLay__textarea.addEventListener('input', textAreaOverLay__updateCanvas);
textAreaOverLay__textarea.addEventListener('scroll', textAreaOverLay__updateCanvas);
textAreaOverLay__updateCanvas();

//~ CANVAS textarea overlay END

//~ CHANGE generator type

currentGeneratorType_selection.forEach(input => {
  input.addEventListener("change", (event) => {
    let title = "";
    getDataAndMakeOrderRow(event);
    if (input.id === "rapp-1") {
      title = "–ú–∞–≥–∏—Å—Ç—Ä–∞–ª–∏";
      currentRappGeneratorType = 1;
    } else if (input.id === "rapp-2") {
      title = "–ö—É—Ä—å–µ—Ä—ã";
      currentRappGeneratorType = 2;
    } else if (input.id === "rapp-3") {
      title = "–ú–µ—Ä—á–∏";
      currentRappGeneratorType = 3;
    } else if (input.id === "rapp-4") {
      title = "–ê–Ω–æ–º–∞–ª–∏–∏";
      currentRappGeneratorType = 4;
    } else if (input.id === "rapp-5") {
      title = "–ó–∞—Å—ã–ª—ã / –î—É–±–ª–∏ / Lost";
      currentRappGeneratorType = 5;
    } else {
      title = "–ß—Ç–æ-—Ç–æ –Ω–æ–≤–µ–Ω—å–∫–æ–µ üòê";
    }
    currentGeneratorType_title.innerText = title;

    // –ü–æ–ª—É—á–∞–µ–º textarea
    const textarea = document.querySelector('.allOrders');
    
    // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ input –¥–ª—è textarea –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
    textarea.dispatchEvent(new Event("input", { bubbles: true }));
    
    // –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    throttledGeneratePreview();
    setTimeout(() => {
      hideMenu()
    }, 600);
  });
});

//~ CHANGE generator type END

//~ CARD Controls

const allHintCards = document.querySelectorAll(".hints-card-container > div");
const hintsContainer = document.querySelector(".hints-card-container");
const controlsContainer = document.querySelector(".hints-container-controls-position");
const btnForward = document.getElementById("changeHintCard-forward");
const btnBackward = document.getElementById("changeHintCard-backward");

const cardCount = allHintCards.length;
const cardWidth = allHintCards[0].offsetWidth;
const gap = 10;
const transitionDuration = 200;

let hintCardOnScreenID = 1;
let isTransitioning = false;
let autoSwitchInterval = null;

// –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
const firstClone = allHintCards[0].cloneNode(true);
const lastClone = allHintCards[cardCount - 1].cloneNode(true);
firstClone.classList.add("cloned");
lastClone.classList.add("cloned");

hintsContainer.appendChild(firstClone);
hintsContainer.insertBefore(lastClone, allHintCards[0]);

const allCards = document.querySelectorAll(".hints-card-container > div");
const totalCards = allCards.length;

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
hintsContainer.style.transform = `translateX(-${(cardWidth + gap) * hintCardOnScreenID}px)`;

// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—ã
controlsContainer.innerHTML = "";
const indicators = [];

for (let i = 0; i < cardCount; i++) {
  let span = document.createElement("span");
  span.dataset.index = i;
  indicators.push(span);
  controlsContainer.appendChild(span);
}

function updateIndicators(index) {
  indicators.forEach((span, i) => {
    span.classList.toggle("active", i === index);
  });
}

updateIndicators(0);

function moveCarousel(direction) {
  if (isTransitioning) return;
  isTransitioning = true;
  hintCardOnScreenID += direction;
  let cardPosition = hintCardOnScreenID * (cardWidth + gap);
  hintsContainer.style.transition = `transform ${transitionDuration}ms ease-in-out`;
  hintsContainer.style.transform = `translateX(-${cardPosition}px)`;

  setTimeout(() => {
    if (hintCardOnScreenID === totalCards - 1) {
      hintCardOnScreenID = 1;
      hintsContainer.style.transition = "none";
      hintsContainer.style.transform = `translateX(-${(cardWidth + gap) * hintCardOnScreenID}px)`;
    } else if (hintCardOnScreenID === 0) {
      hintCardOnScreenID = totalCards - 2;
      hintsContainer.style.transition = "none";
      hintsContainer.style.transform = `translateX(-${(cardWidth + gap) * hintCardOnScreenID}px)`;
    }
    updateIndicators(hintCardOnScreenID - 1);
    isTransitioning = false;
  }, transitionDuration);
}

btnForward.addEventListener("click", () => moveCarousel(1));
btnBackward.addEventListener("click", () => moveCarousel(-1));

indicators.forEach((span) => {
  span.addEventListener("click", (e) => {
    let index = Number(e.target.dataset.index);
    hintCardOnScreenID = index + 1;
    let cardPosition = hintCardOnScreenID * (cardWidth + gap);
    hintsContainer.style.transition = `transform ${transitionDuration}ms ease-in-out`;
    hintsContainer.style.transform = `translateX(-${cardPosition}px)`;
    updateIndicators(index);
  });
});

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–ª–∞–π–¥–æ–≤
function startAutoSwitch() {
  autoSwitchInterval = setInterval(() => {
    moveCarousel(1);
  }, 6000); // –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–ª–∞–π–¥–æ–≤ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
}

function stopAutoSwitch() {
  if (autoSwitchInterval) {
    clearInterval(autoSwitchInterval);
    autoSwitchInterval = null;
  }
}

// –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ-–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–∫–∏–¥–∞–Ω–∏–∏ –º—ã—à—å—é
hintsContainer.addEventListener("mouseleave", () => {
  startAutoSwitch();
});
startAutoSwitch();
// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ-–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –º—ã—à–∏
hintsContainer.addEventListener("mouseenter", () => {
  stopAutoSwitch();
});


//~ CARD Controls END

//~ HEADER toggle button
const header = document.querySelector('header');
const container = document.querySelector('.container');
const menuToggle = document.querySelector('.menuToggle');
const modalWindow = document.querySelector('.modalWindow');
const menuSelection = document.querySelector('.menuSelection');

menuToggle.addEventListener('click', () => {
  if (header.classList.contains("active")) {
    hideMenu()
  } else {
    showMenu()
  }
});

modalWindow.addEventListener('click', ()=>{
  hideMenu()
})

hideMenu()

function hideMenu(){
  if(header.classList.contains("onLoading")){
    header.classList.remove("onLoading")
  }
  modalWindow.style.display = "none"
  menuToggle.style.backgroundColor = "transparent"
  let menuToggleHeight = 60
  header.style.transform = `translateY(calc(-100% + ${menuToggleHeight}px))`;
  menuToggle.innerHTML = `<i class=\"fa-solid fa-bars\"></i>`
  header.classList.remove("active");
  container.removeAttribute("inert")
  menuSelection.setAttribute("inert", true)
  const pdfForm = document.getElementById("pdf-form")
  pdfForm.removeAttribute("inert")
}

function showMenu(){
  if(header.classList.contains("onLoading")){
    header.classList.remove("onLoading")
  }
  calendarModalWindow.classList.remove("active")
  modalWindow.style.display = "flex"
  menuToggle.style.backgroundColor = "#ff0000"
  header.style.transform = `translateY(0)`;
  menuToggle.innerHTML = `<i class=\"fa-solid fa-xmark\"></i>`
  header.classList.add("active");
  container.setAttribute("inert", true)
  menuSelection.removeAttribute("inert")
}
//~ HEADER toggle button END

//~ Tootltip toggle

const checkbox = document.getElementById("disableTooltip");

function toggleTooltipClass() {
  const elements = document.querySelectorAll(".pegasusTooltip, .tooltipRemoved");
  elements.forEach(el => {
    if (checkbox.checked) {
      el.classList.add("pegasusTooltip");
      el.classList.remove("tooltipRemoved");
    }else{
      el.classList.remove("pegasusTooltip");
      el.classList.add("tooltipRemoved"); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–µ—Ä–Ω—É—Ç—å –∫–ª–∞—Å—Å
    }
  });
}

checkbox.addEventListener("change", toggleTooltipClass);
toggleTooltipClass(); // –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ, —á—Ç–æ–±—ã –ø—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

//~ Tootltip toggle END

//~ Direction dropdown menu

const direction__options = [
  "–°–¶ –î–æ–º–æ–¥–µ–¥–æ–≤–æ –ï–í–°–¶",
  "–°–¶ –Ø–Ω–¥–µ–∫—Å –ú–∞—Ä–∫–µ—Ç –°–æ—Ñ—å–∏–Ω–æ –§–§–¶",
  "–°–¶ –Ø–Ω–¥–µ–∫—Å –ú–∞—Ä–∫–µ—Ç –°–æ—Ñ—å–∏–Ω–æ –°—É–ø–µ—Ä—Å–∫–ª–∞–¥",
  "–°–¶ –Ø–Ω–¥–µ–∫—Å –ú–∞—Ä–∫–µ—Ç –°–æ—Ñ—å–∏–Ω–æ –ö–ì–¢",
  "–°–¶ –¢–∞—Ä–Ω—ã–π (–¢–∞—Ä–Ω—ã–π –î—Ä–æ–ø–æ—Ñ—Ñ)",
  "–°–¶ –õ–∏–ø–µ—Ü–∫",
  "–°–¶ –ö—É—Ä—Å–∫",
  "–°–¶ –ë–µ–ª–≥–æ—Ä–æ–¥",
  "–°–¶ –†–æ—Å—Ç–æ–≤",
  "–°–¶ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä",
  "–†–æ—Å—Ç–æ–≤ –ö–ì–¢",
  "–°–¶ –°—Ç—Ä–æ–≥–∏–Ω–æ",
  "–°–¶ –î–∑–µ—Ä–∂–∏–Ω—Å–∫–∏–π",
  "–°–¶ –¢—Ä–æ–∏—Ü–∫–∏–π",
  "–°–¶ –ö–∞–∑–∞–Ω—å",
  "–°–¶ –ó–∞–ø–∞–¥",
  "–°–¶ –°–∞–º–∞—Ä–∞",
  "–°–¶ –ì—Ä–∏–±–∫–∏",
  "–°–¶ –°—Ç–∞–≤—Ä–æ–ø–æ–ª—å",
  "–°–¶ –î–º–∏—Ç—Ä–æ–≤—Å–∫–æ–µ",
  "–°–¶ –°–ü–ë –ë—É–≥—Ä—ã",
  "–°–¶ –õ–µ–Ω–∏–Ω—Å–∫–∏–µ –≥–æ—Ä–∫–∏",
  "–°–¶ –ú—É—Ä–æ–º",
  "–°–¶ –ß–µ–ª—è–±–∏–Ω—Å–∫",
  "–°–¶ –ß–µ–±–æ–∫—Å–∞—Ä—ã",
  "–°–¶ –ò–∂–µ–≤—Å–∫",
  "–°–¶ –¢—é–º–µ–Ω—å",
  "–°–¶ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥",
  "–°–¶ –ù–∞–±–µ—Ä–µ–∂–Ω—ã–µ –ß–µ–ª–Ω—ã",
  "–°–¶ –û—Ä–µ–Ω–±—É—Ä–≥",
  "–°–¶ –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫",
  "–°–¶ –ë–∞—Ä–Ω–∞—É–ª",
  "–°–¶ –í–æ–ª–æ–≥–¥–∞",
  "–°–¶ –°–º–æ–ª–µ–Ω—Å–∫"
];

const direction__input = document.getElementById("recipient");
const direction__dropdownList = document.getElementById("dropdownList");
let previousValue = "";

// –ö–∞—Ä—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –±—É–∫–≤ –∏–∑ –∞–Ω–≥–ª–∏–π—Å–∫–æ–π —Ä–∞—Å–∫–ª–∞–¥–∫–∏ –≤ —Ä—É—Å—Å–∫—É—é
const ruEnMap = {
  "q": "–π", "w": "—Ü", "e": "—É", "r": "–∫", "t": "–µ", "y": "–Ω", "u": "–≥", "i": "—à", "o": "—â", "p": "–∑",
  "a": "—Ñ", "s": "—ã", "d": "–≤", "f": "–∞", "g": "–ø", "h": "—Ä", "j": "–æ", "k": "–ª", "l": "–¥", 
  "z": "—è", "x": "—á", "c": "—Å", "v": "–º", "b": "–∏", "n": "—Ç", "m": "—å", "Q": "–ô", "W": "–¶", "E": "–£",
  "R": "–ö", "T": "–ï", "Y": "–ù", "U": "–ì", "I": "–®", "O": "–©", "P": "–ó", "A": "–§", "S": "–´", "D": "–í",
  "F": "–ê", "G": "–ü", "H": "–†", "J": "–û", "K": "–õ", "L": "–î", "Z": "–Ø", "X": "–ß", "C": "–°", "V": "–ú",
  "B": "–ò", "N": "–¢", "M": "–¨"
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Ä—É—Å—Å–∫–∏–µ
function transliterate(text) {
  return text.split('').map(char => ruEnMap[char] || char).join('');
}

function updateDropdownList() {
  const search = transliterate(direction__input.value.toLowerCase()); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä—É—Å—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
  direction__dropdownList.innerHTML = "";
  const filteredOptions = direction__options.filter(option => option.toLowerCase().includes(search));
  
  if (filteredOptions.length === 0) {
      const noMatch = document.createElement("div");
      noMatch.classList.add("dropdown-item", "no-matches");
      noMatch.textContent = "–ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π";
      direction__dropdownList.appendChild(noMatch);
  } else {
      filteredOptions.forEach(option => {
          const item = document.createElement("div");
          item.classList.add("dropdown-item");
          item.textContent = option;
          item.addEventListener("click", () => {
              direction__input.value = option;
              direction__dropdownList.classList.remove("show");
          });
          direction__dropdownList.appendChild(item);
      });
  }
  direction__dropdownList.classList.add("show");
}

direction__input.addEventListener("input", updateDropdownList);
direction__input.addEventListener("focus", () => {
  previousValue = direction__input.value;
  direction__input.value = "";
  updateDropdownList();
});

direction__input.addEventListener("blur", () => {
  setTimeout(() => {
      if (!direction__dropdownList.contains(document.activeElement)) {
          direction__dropdownList.classList.remove("show");
          if (!direction__options.includes(direction__input.value)) {
              direction__input.value = previousValue;
          }
      }
  }, 200);
});

document.addEventListener("click", (e) => {
  if (!e.target.closest(".dropdown")) {
      direction__dropdownList.classList.remove("show");
  }
});

//~ Direction dropdown menu END

//~ CANVAS header
const canvas = document.getElementById('headerArrowCanvas');
const ctx = canvas.getContext('2d');

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä canvas —Ä–∞–≤–Ω—ã–º —Ä–∞–∑–º–µ—Ä—É header
canvas.width = header.clientWidth;
canvas.height = header.clientHeight;

const arrows = [];
const arrowSpeedMin = 1; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —Å—Ç—Ä–µ–ª–∫–∏
const arrowSpeedMax = 3; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —Å—Ç—Ä–µ–ª–∫–∏
const arrowSpawnRate = 100; // –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–µ–ª–æ–∫ (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
const arrowLifeTime = 5000; // –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å—Ç—Ä–µ–ª–∫–∏ (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
const mouseRadius = 50; // –†–∞–¥–∏—É—Å —Å–≤–µ—á–µ–Ω–∏—è –≤–æ–∫—Ä—É–≥ –º—ã—à–∏
let mouseX = -100, mouseY = -100; // –ü–æ–∑–∏—Ü–∏—è –º—ã—à–∏ (–≤–Ω–µ canvas –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
let isMouseOnCanvas = false; // –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∫—É—Ä—Å–æ—Ä –Ω–∞ canvas

// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–æ—á–µ–∫ –Ω–∞ –∑–∞–¥–Ω–µ–º —Ñ–æ–Ω–µ
const dotColor = '#333'; // –¶–≤–µ—Ç —Ç–æ—á–µ–∫
const dotSize = 1; // –†–∞–∑–º–µ—Ä —Ç–æ—á–µ–∫
const dotSpacing = 10; // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏
const dots = []; // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ—á–µ–∫

// –°–æ–∑–¥–∞—ë–º —Ç–æ—á–∫–∏ –Ω–∞ –∑–∞–¥–Ω–µ–º —Ñ–æ–Ω–µ
for (let x = 0; x < canvas.width; x += dotSpacing) {
    for (let y = 0; y < canvas.height; y += dotSpacing) {
        dots.push({ x, y });
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Ç–æ—á–µ–∫ –Ω–∞ –∑–∞–¥–Ω–µ–º —Ñ–æ–Ω–µ
function drawDottedBackground() {
    dots.forEach(dot => {
        if (isMouseOnCanvas) {
            const dx = dot.x - mouseX;
            const dy = dot.y - mouseY;
            const distance = Math.sqrt(dx * dx + dy * dy);

            // –ï—Å–ª–∏ —Ç–æ—á–∫–∞ –≤ —Ä–∞–¥–∏—É—Å–µ –Ω–∞–≤–µ–¥–µ–Ω–∏—è, –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –µ—ë
            if (distance <= mouseRadius) {
                ctx.fillStyle = `rgba(255, 255, 255, ${1 - distance / mouseRadius})`; // –ü–ª–∞–≤–Ω–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ
            } else {
                ctx.fillStyle = dotColor;
            }
        } else {
            ctx.fillStyle = dotColor; // –ï—Å–ª–∏ –∫—É—Ä—Å–æ—Ä –≤–Ω–µ canvas, —Ç–æ—á–∫–∏ –Ω–µ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞—é—Ç—Å—è
        }

        ctx.fillRect(dot.x, dot.y, dotSize, dotSize);
    });
}

class Arrow {
    constructor(x, y, angle, speed) {
        this.x = x;
        this.y = y;
        this.angle = angle;
        this.speed = speed;
        this.createdAt = Date.now(); // –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–µ–ª–∫–∏
        this.rotationSpeed = (Math.random() - 0.5) * 0.05; // –°–ª—É—á–∞–π–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –≤—Ä–∞—â–µ–Ω–∏—è
        this.initialOpacity = Math.random() * 0.3 + 0.3; // –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –æ—Ç 30% –¥–æ 60%
        this.currentOpacity = this.initialOpacity;
        this.initialSize = 16; // –†–∞–∑–º–µ—Ä —Å—Ç—Ä–µ–ª–∫–∏
        this.currentSize = this.initialSize;
    }

    getAge() {
        return Date.now() - this.createdAt; // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç —Å—Ç—Ä–µ–ª–∫–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Å—Ç—Ä–µ–ª–∫–∞ –≤ —Ä–∞–¥–∏—É—Å–µ —Å–≤–µ—á–µ–Ω–∏—è –º—ã—à–∏
    isNearMouse() {
        const dx = this.x - mouseX;
        const dy = this.y - mouseY;
        return Math.sqrt(dx * dx + dy * dy) <= mouseRadius;
    }

    draw() {
        ctx.save();
        ctx.translate(this.x, this.y);
        ctx.rotate(this.angle);
        ctx.scale(this.currentSize / this.initialSize, this.currentSize / this.initialSize); // –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ

        // –¶–≤–µ—Ç —Å—Ç—Ä–µ–ª–∫–∏
        const baseColor = `rgba(255, 255, 255, ${this.currentOpacity})`; // –ë–µ–ª—ã–π —Ü–≤–µ—Ç —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
        const glowColor = 'rgba(255, 255, 255, 1)'; // –Ø—Ä–∫–∏–π –±–µ–ª—ã–π –¥–ª—è —Å–≤–µ—á–µ–Ω–∏—è

        // –ï—Å–ª–∏ —Å—Ç—Ä–µ–ª–∫–∞ —Ä—è–¥–æ–º —Å –º—ã—à–∫–æ–π, –¥–æ–±–∞–≤–ª—è–µ–º —Å–≤–µ—á–µ–Ω–∏–µ
        if (this.isNearMouse() && isMouseOnCanvas) {
            ctx.shadowBlur = 10; // –°–≤–µ—á–µ–Ω–∏–µ
            ctx.shadowColor = glowColor;
        } else {
            ctx.shadowBlur = 0;
        }

        // –†–∏—Å—É–µ–º —Å–∏–º–≤–æ–ª —Å—Ç—Ä–µ–ª–∫–∏ ‚ûú
        ctx.font = `${this.initialSize}px Arial`;
        ctx.fillStyle = baseColor;
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';
        ctx.fillText('‚ûú', 0, 0);

        ctx.restore();
    }

    update() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Å—Ç—Ä–µ–ª–∫–∏
        this.x += Math.cos(this.angle) * this.speed;
        this.y += Math.sin(this.angle) * this.speed;

        // –ú–µ–Ω—è–µ–º —É–≥–æ–ª –¥–ª—è –∑–∞–∫—Ä—É—á–∏–≤–∞–Ω–∏—è –∏–ª–∏ –ø–æ–≤–æ—Ä–æ—Ç–∞
        this.angle += this.rotationSpeed;

        // –£–º–µ–Ω—å—à–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –∏ —Ä–∞–∑–º–µ—Ä –ø—Ä–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∫ –∫–æ–Ω—Ü—É –∂–∏–∑–Ω–∏
        const age = this.getAge();
        if (age > arrowLifeTime * 0.8) {
            const fadeProgress = (age - arrowLifeTime * 0.8) / (arrowLifeTime * 0.2);
            this.currentOpacity = this.initialOpacity * (1 - fadeProgress);
            this.currentSize = this.initialSize * (1 - fadeProgress);
        }

        this.draw();
    }

    isOutOfBounds() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã—à–ª–∞ –ª–∏ —Å—Ç—Ä–µ–ª–∫–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã canvas
        return (
            this.x < -20 || this.x > canvas.width + 20 ||
            this.y < -20 || this.y > canvas.height + 20
        );
    }

    isDead() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å—Ç—Ä–µ–ª–∫–∏
        return this.getAge() > arrowLifeTime;
    }
}

function createArrow() {
    // –°–ª—É—á–∞–π–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–Ω—É—Ç—Ä–∏ canvas
    const x = Math.random() * canvas.width;
    const y = Math.random() * canvas.height;
    const angle = Math.random() * Math.PI * 2; // –°–ª—É—á–∞–π–Ω—ã–π —É–≥–æ–ª
    const speed = Math.random() * (arrowSpeedMax - arrowSpeedMin) + arrowSpeedMin; // –°–ª—É—á–∞–π–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
    arrows.push(new Arrow(x, y, angle, speed));
}

function animate() {
    // –û—á–∏—â–∞–µ–º canvas –∏ —Ä–∏—Å—É–µ–º —Ç–æ—á–µ—á–Ω—ã–π —Ñ–æ–Ω
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    drawDottedBackground();

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏ —Ä–∏—Å—É–µ–º –≤—Å–µ —Å—Ç—Ä–µ–ª–∫–∏
    arrows.forEach((arrow, index) => {
        arrow.update();

        // –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–µ–ª–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã—à–ª–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã canvas –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–æ –≤—Ä–µ–º—è –∏—Ö –∂–∏–∑–Ω–∏
        if (arrow.isOutOfBounds() || arrow.isDead()) {
            arrows.splice(index, 1);
        }
    });

    requestAnimationFrame(animate);
}

let spawnInterval;

// –°–æ–∑–¥–∞—ë–º —Å—Ç—Ä–µ–ª–∫–∏ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
spawnInterval = setInterval(createArrow, arrowSpawnRate);

// –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏ –ø–æ –≤—Å–µ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—É
document.addEventListener('mousemove', (e) => {
    const rect = canvas.getBoundingClientRect();
    mouseX = e.clientX - rect.left;
    mouseY = e.clientY - rect.top;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∫—É—Ä—Å–æ—Ä –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö canvas
    isMouseOnCanvas = (
        mouseX >= 0 && mouseX <= canvas.width &&
        mouseY >= 0 && mouseY <= canvas.height
    );
});

animate();

// –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä canvas –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
window.addEventListener('resize', () => {
    canvas.width = header.clientWidth;
    canvas.height = header.clientHeight;
    dots.length = 0; // –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤ —Ç–æ—á–µ–∫
    for (let x = 0; x < canvas.width; x += dotSpacing) {
        for (let y = 0; y < canvas.height; y += dotSpacing) {
            dots.push({ x, y });
        }
    }
});
//~ CANVAS header END

//~ CANVAS Container

const containerCanvas = document.getElementById('containerCanvas');
const containerCanvas_ctx = containerCanvas.getContext('2d');

document.body.style.margin = '0';
document.body.style.overflow = 'hidden';

let containerCanvas_bgColor = '#2E2E2E';
let containerCanvas_gridColor = '#232323';
let containerCanvas_highlightColor = '#5E5E5E';
const containerCanvas_gridSize = 50;  // –†–∞–∑–º–µ—Ä –∫–≤–∞–¥—Ä–∞—Ç–∞
const containerCanvas_gap = 2;  // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∫–≤–∞–¥—Ä–∞—Ç–∞–º–∏
let containerCanvas_offsetX = 0;
let containerCanvas_offsetY = 0;
let containerCanvas_mouseX = -1000;
let containerCanvas_mouseY = -1000;
const containerCanvas_circleSize = 60;  // –†–∞–∑–º–µ—Ä –∫—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ –∫—É—Ä—Å–æ—Ä–æ–º
const containerCanvas_circleYOffset = -60;  // –°–º–µ—â–µ–Ω–∏–µ –∫—Ä—É–≥–∞ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏

function containerCanvas_resizeCanvas() {
    containerCanvas.width = window.innerWidth;
    containerCanvas.height = window.innerHeight;
}

function containerCanvas_drawGrid() {
    containerCanvas_ctx.fillStyle = containerCanvas_bgColor;
    containerCanvas_ctx.fillRect(0, 0, containerCanvas.width, containerCanvas.height);

    // –°–Ω–∞—á–∞–ª–∞ —Ä–∏—Å—É–µ–º –∫—Ä—É–≥ –∑–∞ –∫–≤–∞–¥—Ä–∞—Ç–∞–º–∏, —Å–º–µ—â–∞—è –µ–≥–æ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ –Ω–∞ -60 –ø–∏–∫—Å–µ–ª–µ–π
    const gradient = containerCanvas_ctx.createRadialGradient(containerCanvas_mouseX, containerCanvas_mouseY + containerCanvas_circleYOffset, 0, containerCanvas_mouseX, containerCanvas_mouseY + containerCanvas_circleYOffset, containerCanvas_circleSize);
    gradient.addColorStop(0, containerCanvas_highlightColor);
    gradient.addColorStop(1, containerCanvas_bgColor);
    
    containerCanvas_ctx.fillStyle = gradient;
    containerCanvas_ctx.beginPath();
    containerCanvas_ctx.arc(containerCanvas_mouseX, containerCanvas_mouseY + containerCanvas_circleYOffset, containerCanvas_circleSize, 0, 2 * Math.PI);
    containerCanvas_ctx.fill();
    
    // –¢–µ–ø–µ—Ä—å —Ä–∏—Å—É–µ–º –∫–≤–∞–¥—Ä–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø–æ–≤–µ—Ä—Ö –∫—Ä—É–≥–∞
    for (let x = -containerCanvas_gridSize; x < containerCanvas.width + containerCanvas_gridSize; x += containerCanvas_gridSize + containerCanvas_gap) {
        for (let y = -containerCanvas_gridSize; y < containerCanvas.height + containerCanvas_gridSize; y += containerCanvas_gridSize + containerCanvas_gap) {
            let drawX = x + containerCanvas_offsetX % (containerCanvas_gridSize + containerCanvas_gap);
            let drawY = y + containerCanvas_offsetY % (containerCanvas_gridSize + containerCanvas_gap);
            
            containerCanvas_ctx.fillStyle = containerCanvas_gridColor;
            containerCanvas_ctx.fillRect(drawX, drawY, containerCanvas_gridSize, containerCanvas_gridSize);
        }
    }
}

function containerCanvas_animate() {
    containerCanvas_offsetX += 0.2;
    containerCanvas_offsetY += 0.2;
    containerCanvas_drawGrid();
    requestAnimationFrame(containerCanvas_animate);
}

window.addEventListener('resize', containerCanvas_resizeCanvas);
window.addEventListener('mousemove', (e) => {
    containerCanvas_mouseX = e.clientX;
    containerCanvas_mouseY = e.clientY;
});

containerCanvas_resizeCanvas();
containerCanvas_animate();


//~ CANVAS Container END

//~ –ö–∞–ª–µ–Ω–¥–∞—Ä—å

const dateDisplay = document.getElementById('dateDisplay');
const calendarModalWindow = document.getElementById('calendarModalWindow');
const calendar = document.getElementById('calendar');
const calendarDays1 = document.getElementById('calendarDays1');
const calendarDays2 = document.getElementById('calendarDays2');
const todayBtn = document.getElementById('todayBtn');
const tomorrowBtn = document.getElementById('tomorrowBtn');
const noDayBtn = document.getElementById('noDayBtn');
const prevMonth = document.getElementById('prevMonth');
const nextMonth = document.getElementById('nextMonth');
const currentMonth1 = document.getElementById('currentMonth1');
const currentMonth2 = document.getElementById('currentMonth2');
const monthButtons = document.querySelectorAll('.calendar-nav-sellction');

let selectedDate = new Date();
let selectedMonth = selectedDate.getMonth(); // –ú–µ—Å—è—Ü, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã–±—Ä–∞–Ω –¥–µ–Ω—å
let selectedDay = selectedDate.getDate();  // –î–µ–Ω—å, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–±—Ä–∞–Ω

function renderCalendar(date) {
    calendarDays1.innerHTML = '';
    calendarDays2.innerHTML = '';
    
    const year = date.getFullYear();
    const month = date.getMonth();
    
    generateMonth(calendarDays1, currentMonth1, year, month);
    generateMonth(calendarDays2, currentMonth2, year, month + 1);
    
    updateCalendarNavButtons(month);
}

function generateMonth(container, label, year, month) {
    const tempDate = new Date(year, month, 1);
    label.textContent = tempDate.toLocaleString('ru', { month: 'long', year: 'numeric' });
    
    container.innerHTML = ''; // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–µ—Ä–µ–¥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º
    
    const daysOfWeek = ['–ü–ù', '–í–¢', '–°–†', '–ß–¢', '–ü–¢', '–°–ë', '–í–°'];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    daysOfWeek.forEach(day => {
        let dayDiv = document.createElement('div');
        dayDiv.textContent = day;
        dayDiv.classList.add('calendar-daysOfWeek');
        container.appendChild(dayDiv);
    });
    
    let firstDay = new Date(year, month, 1).getDay();
    firstDay = (firstDay === 0) ? 6 : firstDay - 1;
    let daysInMonth = new Date(year, month + 1, 0).getDate();
    let daysInPrevMonth = new Date(year, month, 0).getDate();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    for (let i = firstDay; i > 0; i--) {
        let div = document.createElement('div');
        div.textContent = daysInPrevMonth - i + 1;
        div.style.opacity = '0.5';
        div.classList.add('prev-month');
        container.appendChild(div);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    for (let i = 1; i <= daysInMonth; i++) {
        let div = document.createElement('div');
        div.textContent = i;
        div.classList.add('current-month');
        div.addEventListener('click', () => {
            selectedDate = new Date(year, month, i);
            dateDisplay.textContent = selectedDate.toLocaleDateString('ru');
            calendarModalWindow.classList.remove('active');
            selectedMonth = selectedDate.getMonth(); // –¢–µ–ø–µ—Ä—å —Ç–æ—á–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ —Ñ–∞–∫—Ç—É –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
            selectedDay = i; // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å
            renderCalendar(selectedDate); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –¥–Ω–µ–º
            throttledGeneratePreview()
        });
        container.appendChild(div);
        
        // –ü–æ–¥—Å–≤–µ—Ç–∏–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
        if (year === new Date().getFullYear() && month === new Date().getMonth() && i === new Date().getDate()) {
            div.classList.add('currentDay');
        }
        
        // –ü–æ–¥—Å–≤–µ—Ç–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å, –µ—Å–ª–∏ –º–µ—Å—è—Ü —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–º –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
        if (shouldHighlightSelectedDay(year, month, i)) {
            div.classList.add('selectedCurrentDay');
        }
    }
}

function shouldHighlightSelectedDay(year, month, day) {
  const dateStr = dateDisplay.textContent.trim();

  if (dateStr.startsWith('__')) {
      return false; // –ï—Å–ª–∏ —ç—Ç–æ "__", –Ω–µ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å
  }

  // –†–∞–∑–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –≤—Ä—É—á–Ω—É—é
  const [dayDisplay, monthDisplay, yearDisplay] = dateStr.split('.').map(Number);
  const displayDate = new Date(yearDisplay, monthDisplay - 1, dayDisplay);

  return displayDate.getFullYear() === year && displayDate.getMonth() === month && displayDate.getDate() === day;
}

function updateCalendarNavButtons(currentMonth) {
  const currentYear = new Date().getFullYear();
  const selectedDateParts = dateDisplay.textContent.trim().split('.');
  const selectedDay = parseInt(selectedDateParts[0], 10);
  const selectedMonthFromDate = parseInt(selectedDateParts[1], 10) - 1; // –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –º–µ—Å—è—Ü–µ–≤ –≤ JS —Å 0
  const selectedYear = parseInt(selectedDateParts[2], 10);

  monthButtons.forEach(button => {
      const monthIndex = parseInt(button.textContent, 10) - 1; // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –≤ –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞

      // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–ª–∞—Å—Å—ã
      button.classList.remove('calendar-nav-currentMonth', 'calendar-nav-showingMonth', 'calendar-nav-showingMonth-selectedDay');

      // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü (–≥–¥–µ —Å–∏—Å—Ç–µ–º–Ω–∞—è –¥–∞—Ç–∞)
      if (monthIndex === new Date().getMonth() && currentYear === new Date().getFullYear()) {
          button.classList.add('calendar-nav-currentMonth');
      }

      // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –º–µ—Å—è—Ü
      if (monthIndex === currentMonth) {
          button.classList.add('calendar-nav-showingMonth');
      }

      // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –º–µ—Å—è—Ü, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –º–µ—Å—è—Ü–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã –≤ `#dateDisplay`
      if (monthIndex === selectedMonthFromDate && selectedYear) {
          button.classList.add('calendar-nav-showingMonth-selectedDay');
      }
  });
}

dateDisplay.addEventListener('click', () => {
    calendarModalWindow.classList.toggle('active');
    renderCalendar(selectedDate);
    const pdfForm = document.getElementById("pdf-form")
    const preview = document.querySelector(".preview")
    if(pdfForm && preview){
      pdfForm.setAttribute("inert", true)
      preview.setAttribute("inert", true)
    }
    function setupCalendarModal() {
      const calendarModalWindow = document.getElementById('calendarModalWindow');
      
      if (!calendarModalWindow || !calendar) return;
      
      calendarModalWindow.addEventListener('click', (event) => {
          if (!calendar.contains(event.target)) {
              calendarModalWindow.classList.remove("active")
          }
          if(pdfForm && preview){
            pdfForm.removeAttribute("inert")
            preview.removeAttribute("inert")
          }
      });
    }
    setupCalendarModal()
});

dateDisplay.addEventListener("click", (event) => {
  if (!document.getElementById("calendar").contains(event.target)) {
      renderCalendar(selectedDate);
  }
});

todayBtn.addEventListener('click', () => {
    selectedDate = new Date();
    dateDisplay.textContent = selectedDate.toLocaleDateString('ru');
    calendarModalWindow.classList.remove('active');
    selectedMonth = selectedDate.getMonth(); // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü
    selectedDay = selectedDate.getDate(); // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å
    renderCalendar(selectedDate); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º –¥–Ω–µ–º
    throttledGeneratePreview()
});

tomorrowBtn.addEventListener('click', () => {
    selectedDate = new Date();
    selectedDate.setDate(selectedDate.getDate() + 1);
    dateDisplay.textContent = selectedDate.toLocaleDateString('ru');
    calendarModalWindow.classList.remove('active');
    selectedMonth = selectedDate.getMonth(); // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü
    selectedDay = selectedDate.getDate(); // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å
    renderCalendar(selectedDate); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–º –¥–Ω–µ–º
    throttledGeneratePreview()
});

noDayBtn.addEventListener('click', () => {
    const date = new Date();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const year = date.getFullYear();
    dateDisplay.textContent = `___.${month}.${year}`;
    calendarModalWindow.classList.remove('active');
    renderCalendar(selectedDate); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    throttledGeneratePreview()
});

prevMonth.addEventListener('click', () => {
    selectedDate.setMonth(selectedDate.getMonth() - 1);
    selectedMonth = selectedDate.getMonth(); // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü
    renderCalendar(selectedDate);
});

nextMonth.addEventListener('click', () => {
    selectedDate.setMonth(selectedDate.getMonth() + 1);
    selectedMonth = selectedDate.getMonth(); // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü
    renderCalendar(selectedDate);
});

monthButtons.forEach(button => {
    button.addEventListener('click', (event) => {
        const monthIndex = parseInt(event.target.textContent, 10) - 1;
        selectedDate.setMonth(monthIndex);
        selectedMonth = monthIndex; // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü
        renderCalendar(selectedDate);
    });
});


//~ –ö–∞–ª–µ–Ω–¥–∞—Ä—å END

//~ –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–µ–≤—å—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
const previewWelcomeMessageIcon = document.querySelector(".previewWelcomeMessage-icon");

if (previewWelcomeMessageIcon) {
  const changingHourglassIcon = setInterval(() => {
    previewWelcomeMessageIcon.innerHTML = "<i class=\"fa-solid fa-hourglass-start\"></i>";
    setTimeout(() => {
      previewWelcomeMessageIcon.innerHTML = "<i class=\"fa-solid fa-hourglass-half\"></i>";
    }, 300);
    setTimeout(() => {
      previewWelcomeMessageIcon.innerHTML = "<i class=\"fa-solid fa-hourglass-end\"></i>";
    }, 600);
  }, 900);

} else {
  if (changingHourglassIcon) {
    clearInterval(changingHourglassIcon);
  }
}

//~ –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–µ–≤—å—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã END

let localBlob

let history = [""];
let historyIndex = 0;
const allOrders = document.querySelector(".allOrders");
const lineNumbers = document.querySelector("#line-numbers");
const undoBtn = document.getElementById("textareaUndo-btn");
const redoBtn = document.getElementById("textareaRedo-btn");
const clearBtn = document.getElementById("clearAllEmptyLines-btn");

function saveToHistory() {
  if (history[historyIndex] !== allOrders.value) {
    history = history.slice(0, historyIndex + 1);
    history.push(allOrders.value);
    historyIndex++;
  }
}

function updateLineNumbers() {
  const lines = allOrders.value.split("\n");
  lineNumbers.innerHTML = lines.map((line, i) => 
    line.trim() === "" ? '<div class="empty-line">√ó</div>' : `<div>${i + 1}</div>`
  ).join("");
}

allOrders.addEventListener("input", () => {
  saveToHistory();
  updateLineNumbers();
});

clearBtn.addEventListener("click", (event) => {
  event.preventDefault();
  allOrders.value = allOrders.value
    .split("\n")
    .filter(line => line.trim() !== "")
    .join("\n");
  updateLineNumbers();
  saveToHistory();
});

undoBtn.addEventListener("click", () => {
  if (historyIndex > 0) {
    historyIndex--;
    allOrders.value = history[historyIndex];
    allOrders.dispatchEvent(new Event("input", { bubbles: true }));
    throttledGeneratePreview();
  }
});

redoBtn.addEventListener("click", () => {
  if (historyIndex < history.length - 1) {
    historyIndex++;
    allOrders.value = history[historyIndex];
    allOrders.dispatchEvent(new Event("input", { bubbles: true }));
    throttledGeneratePreview();
  }
});

updateLineNumbers();

document.getElementById("allSelect-btn").addEventListener("click", (event) => {
  event.preventDefault();
  let allOrders = document.querySelector(".allOrders");
  if (allOrders) {
    allOrders.select();
  }
});

document.getElementById("clearAll-btn").addEventListener("click", (event) => {
  event.preventDefault();
  const allOrders = document.querySelector(".allOrders");
  allOrders.value = "";
  allOrders.dispatchEvent(new Event("input", { bubbles: true }));
  allOrders.focus();
  document.querySelector("#line-numbers").innerHTML = "<div>1</div>";
  formatingAnimation();
  throttledGeneratePreview();
});

document.getElementById("clearAllEmptyLines-btn").addEventListener("click", (event) => {
  event.preventDefault();
  let allOrders = document.querySelector(".allOrders");
  if (allOrders) {
    allOrders.value = allOrders.value
      .split("\n")
      .filter(line => line.trim() !== "")
      .join("\n");
  }
});

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–∫—Ä–æ–ª–æ–º
document.querySelector("#canvasContainer").addEventListener("wheel", function(event) {
  if (event.ctrlKey) {
    event.preventDefault();
    const canvases = this.querySelectorAll("canvas");

    canvases.forEach(canvas => {
      let currentWidth = parseFloat(getComputedStyle(canvas).width);
      let newWidth = currentWidth * (event.deltaY > 0 ? 0.94 : 1.06);
      newWidth = Math.max(298, Math.min(newWidth, 850));
      canvas.style.width = `${newWidth}px`;
    });

    let scalePercent = Math.round((parseFloat(getComputedStyle(canvases[0]).width) / 595) * 100);
    if (scalePercent === 96 || scalePercent === 104) {
      scalePercent = 100;
    }
    document.querySelector(".scalePersent").textContent = `${scalePercent}%`;
  }
});

const canvasContainer = document.getElementById("canvasContainer");

if (canvasContainer) {
  const observer = new MutationObserver(() => {
    const previewScaleMinusBtn = document.querySelector(".previewScale-minus-btn");
    const previewScalePlusBtn = document.querySelector(".previewScale-plus-btn");

    if (previewScaleMinusBtn && !previewScaleMinusBtn.dataset.listenerAdded) {
      previewScaleMinusBtn.dataset.listenerAdded = "true";
      previewScaleMinusBtn.addEventListener("click", () => {
        updateCanvasScale(0.94);
      });
    }

    if (previewScalePlusBtn && !previewScalePlusBtn.dataset.listenerAdded) {
      previewScalePlusBtn.dataset.listenerAdded = "true";
      previewScalePlusBtn.addEventListener("click", () => {
        updateCanvasScale(1.06);
      });
    }
  });

  observer.observe(canvasContainer, { childList: true, subtree: true });
} else {
}

function updateCanvasScale(scaleFactor) {
  const canvases = document.querySelectorAll("#canvasContainer canvas");
  if (canvases.length === 0) {
    return;
  }

  canvases.forEach(canvas => {
    let currentWidth = parseFloat(getComputedStyle(canvas).width);
    let newWidth = currentWidth * scaleFactor;
    newWidth = Math.max(250, Math.min(newWidth, 850)); // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è

    canvas.style.width = `${newWidth}px`;
  });

  let scalePercent = Math.round((parseFloat(getComputedStyle(canvases[0]).width) / 595) * 100);
  if (scalePercent === 96 || scalePercent === 104) scalePercent = 100;

  const scalePersentText = document.querySelector(".scalePersent");
  if (scalePersentText) {
    scalePersentText.textContent = `${scalePercent}%`;
  }
}

document.getElementById("pdf-form").addEventListener("submit", function (event) {
  event.preventDefault();
  
  if (event.submitter && document.getElementById("calendar").contains(event.submitter)) {
    return;
  }else if(document.getElementById("disableTooltip")){
    return;
  }

  formatingAnimation();
  throttledGeneratePreview();
});


//~ –ê–Ω–∏–º–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ DASHBOARD
function formatingAnimation() {
  const checkForloaderContainer = document.querySelector('.loaderContainer')
  const dashboardIcon = document.querySelector('.textAreaDashboard > i')
  const dashboardIconEND = document.querySelector('.textAreaDashboard > i.fa-check')
  const statusFinishIcon = document.querySelector('.statusFinishIcon')
  const dashboardInfoText = document.querySelector('.dashboardInfoText');
  containerCanvas_highlightColor = "#00dcff"
  if (dashboardInfoText) {
    dashboardInfoText.classList.add("generating");
  } else {
    console.warn("–≠–ª–µ–º–µ–Ω—Ç .dashboardInfoText –Ω–µ –Ω–∞–π–¥–µ–Ω!");
  }
  if (!checkForloaderContainer) {
    const canvasContainer = document.getElementById("canvasContainer");
    canvasContainer.scrollTo(0, 0)
    canvasContainer.style.overflowY = "hidden"
    
    const loaderContainer = document.createElement("div");
    loaderContainer.classList.add("loaderContainer")
    const loaderContainerText = document.createElement("div");
    loaderContainerText.classList.add("loaderContainerText")
    loaderContainerText.innerText = "–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞"
    
    const loaderContainerTextSpan = document.createElement("span");
    loaderContainerText.classList.add("loaderContainerTextSpan")
    loaderContainerTextSpan.innerText = ""
    let dots = 0;
    setInterval(() => {
      loaderContainerTextSpan.innerText = ".".repeat(dots);
      dots = (dots + 1) % 4;
    }, 150);
    
    loaderContainerText.appendChild(loaderContainerTextSpan);
    loaderContainer.appendChild(loaderContainerText);
    
    const loadingCircle = document.createElement("div");
    loadingCircle.classList.add("loaderContainerCircle")
    const loaderContainerIcon = document.createElement("i")
    loaderContainerIcon.classList.add("loaderContainerIcon", "fa-solid", "fa-file", "fa-beat-fade")
    
    loaderContainer.appendChild(loaderContainerIcon);
    loaderContainer.appendChild(loadingCircle);
    canvasContainer.appendChild(loaderContainer);
    
  } else if (dashboardIcon) {
    dashboardIcon.remove();
    
    const statusFinishIcon = document.createElement("span");
    statusFinishIcon.classList.add("statusFinishIcon");
    statusFinishIcon.style.setProperty("--statusDanceColor", "0, 220, 255");
    const textAreaDashboard = document.querySelector(".textAreaDashboard");
    if (textAreaDashboard) {
      textAreaDashboard.insertBefore(statusFinishIcon, textAreaDashboard.firstChild);
    }


  } else if (statusFinishIcon) {
    statusFinishIcon.style.setProperty("--statusDanceColor", "0, 220, 255");
    
  } else if (dashboardIconEND) {
    statusFinishIcon.remove();
  }
}
//~ –ê–Ω–∏–º–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ DASHBOARD

//~ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ textarea –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏—Ö –≤ order-row 
function getDataAndMakeOrderRow(){

  let setcionNumber = 1;
  const textarea = document.querySelector('.allOrders');
  const lineNumbersDiv = document.getElementById('line-numbers');

  const lineNumber = textarea.value.split('\n');
  let lineNumbers = '';
  let number = 1;

  lineNumber.forEach((line, index) => {
      if (line.trim() !== '') {
          lineNumbers += `<div>${number}</div>`;
          number++;
      } else {
          lineNumbers += `<div class="empty-line">√ó</div>`;
      }
  });

  lineNumbersDiv.innerHTML = lineNumbers;

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–∫—Ä–æ–ª–ª–∞
  textarea.addEventListener('scroll', () => {
      lineNumbersDiv.scrollTop = textarea.scrollTop;
  });

  // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
  function highlightActiveLine() {
      const cursorPosition = textarea.selectionStart;
      const textBeforeCursor = textarea.value.substring(0, cursorPosition);
      const currentLineIndex = textBeforeCursor.split("\n").length - 1;

      // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—É—é –ø–æ–¥—Å–≤–µ—Ç–∫—É
      document.querySelectorAll(".line-highlight").forEach(el => el.classList.remove("line-highlight"));

      // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –≤ –Ω–æ–º–µ—Ä–∞—Ö
      const lineNumbers = lineNumbersDiv.querySelectorAll("div");
      if (lineNumbers[currentLineIndex]) {
          lineNumbers[currentLineIndex].classList.add("line-highlight");
      }
  }
  textarea.addEventListener("keyup", highlightActiveLine);
  textarea.addEventListener("click", highlightActiveLine);

  document.addEventListener("selectionchange", () => {
    const selection = window.getSelection();
    if (!selection.rangeCount) return;

    const textarea = document.querySelector(".allOrders");
    const lineNumbersDiv = document.getElementById("line-numbers");
    const lineNumbers = lineNumbersDiv.querySelectorAll("div");

    const start = textarea.selectionStart;
    let end = textarea.selectionEnd;

    const textBeforeStart = textarea.value.substring(0, start);
    const textBeforeEnd = textarea.value.substring(0, end);

    let startLine = textBeforeStart.split("\n").length - 1;
    let endLine = textBeforeEnd.split("\n").length - 1;

    // –ï—Å–ª–∏ `selectionEnd` —Å—Ç–æ–∏—Ç –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏, —É–º–µ–Ω—å—à–∞–µ–º `endLine`
    if (end > 0 && textarea.value[end - 1] === '\n') {
        endLine--;
    }

    lineNumbers.forEach((line, index) => {
        if (index >= startLine && index <= endLine) {
            line.classList.add("line-selected");
        } else {
            line.classList.remove("line-selected");
        }
    });
});

document.addEventListener("click", (event) => {
  const textarea = document.querySelector(".allOrders");
  const lineNumbersDiv = document.getElementById("line-numbers");
  const scaleButtons = document.querySelectorAll(".previewScale-btn");

  // –ï—Å–ª–∏ –∫–ª–∏–∫ –±—ã–ª –ø–æ –æ–¥–Ω–æ–π –∏–∑ –∫–Ω–æ–ø–æ–∫ –º–∞—Å—à—Ç–∞–±–∞ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
  if ([...scaleButtons].some(btn => btn.contains(event.target))) {
    return;
  }

  if (!textarea.contains(event.target) && !lineNumbersDiv.contains(event.target)) {
    document.querySelectorAll(".line-selected").forEach(el => el.classList.remove("line-selected"));
  }
});



  const ordersContainer = document.getElementById("orders-container");
  const lines = event.target.value
      .split('\n')
      .map(line => line.trim().replace(/\s+/g, ' '))
      .filter(line => line.length > 0);

  ordersContainer.innerHTML = '';

  lines.forEach((line, index) => {
      line = line.replace(/[()]/g, '');
      const parts = line.split(' ').filter(part => part.length > 0);

      let orderNumber = '';
      let cargoCode = '';
      let anomalyDescription = '';
      let orderType = '‚Äî'
      let oneRow = false;

      if(currentRappGeneratorType === 1){
        //~ –ú–ê–ì–ò–°–¢–†–ê–õ–ò ‚Ä¢ –ú–ê–ì–ò–°–¢–ê–†–õ–ò ‚Ä¢ –ú–ê–ì–ò–°–¢–ê–†–õ–ò 
        if (parts.length > 0) {
          const firstPart = parts[0];

          if (parts.length > 1 && parts[1].startsWith('LO-')) {
              cargoCode = parts[0];
              orderNumber = parts[1];
              oneRow = false;
          }else if (firstPart.startsWith('LO-')) {
              orderNumber = firstPart;
              cargoCode = parts.slice(1).join(' ');
              oneRow = false;
          }else if (firstPart.startsWith('F0254')) {
              cargoCode = firstPart;
              orderNumber = parts.slice(1).join(' ');
              oneRow = false;
          }else if (firstPart.startsWith('0')) {
              cargoCode = parts[0];
              orderNumber = parts.slice(1).join(' ');
              oneRow = false;
          }else if (firstPart.startsWith('72')) {
              cargoCode = parts[0];
              orderNumber = parts.slice(1).join(' ');
              oneRow = false;
          }else if (firstPart.startsWith('YP')) {
              cargoCode = firstPart;
              orderNumber = parts.slice(1).join(' ');
              oneRow = false;
          }else if (firstPart.startsWith('F1254') || firstPart.startsWith('VOZ') || firstPart.startsWith('PVZ') || firstPart.startsWith('FBS') || firstPart.startsWith('FBY')) {
              orderNumber = firstPart;
              cargoCode = '';
              oneRow = true;
          }else if( firstPart.startsWith('FA254')){
            orderNumber = firstPart;
            cargoCode = '–ê–Ω–æ–º–∞–ª–∏—è';
            oneRow = false;
          }else if( firstPart.startsWith('F3000000000')){
            orderNumber = firstPart;
            cargoCode = '–ü–æ–ª–∏–±–æ–∫—Å';
            oneRow = false;
          }else if (/^\d{9,}-\d+$/.test(firstPart)) {
              cargoCode = firstPart;
              orderNumber = firstPart.split('-')[0];
              oneRow = false;
          }else {
              orderNumber = parts[0] || '';
              cargoCode = parts.slice(1).join(' ') || '';
              oneRow = false;
          }
      }
    }
    if (currentRappGeneratorType === 4) {
      //~ –ê–ù–û–ú–ê–õ–ò–ò ‚Ä¢ –ê–ù–û–ú–ê–õ–ò–ò ‚Ä¢ –ê–ù–û–ú–ê–õ–ò–ò
      if (parts.length > 1 && parts[1].startsWith('FA254')) {
          orderNumber = parts[0] || '';
          cargoCode = parts.length > 1 ? parts[1] : '';
  
          if (cargoCode.includes(' ')) {
              let cargoParts = cargoCode.split(' ');
              cargoCode = cargoParts[0]; // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å
              anomalyDescription = cargoParts.slice(1).join(' '); // –û—Å—Ç–∞–ª—å–Ω–æ–µ —É—Ö–æ–¥–∏—Ç –≤ anomalyDescription
          } else {
              anomalyDescription = parts.length > 2 ? parts.slice(2).join(' ') : '';
          }
      } else {
          orderNumber = parts[0] || '';
          cargoCode = parts.slice(1).join(' ') || '';
  
          if (cargoCode.includes(' ')) {
              let cargoParts = cargoCode.split(' ');
              cargoCode = cargoParts[0]; // –û—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å –≤ cargoCode
              anomalyDescription = cargoParts.slice(1).join(' '); // –û—Å—Ç–∞–ª—å–Ω–æ–µ –≤ anomalyDescription
          }
      }
  
      // –£–¥–∞–ª—è–µ–º –≤—Å–µ –≤–∏–¥—ã –∫–∞–≤—ã—á–µ–∫ –∏–∑ anomalyDescription
      anomalyDescription = anomalyDescription.replace(/["'`]/g, '');
  }else if (currentRappGeneratorType === 5) {
      const firstPart = parts[0];
  
      if (firstPart.startsWith('YP') || firstPart.startsWith('P0')) {
          orderNumber = "‚Äî";
          cargoCode = firstPart; // –¢–µ–∫—Å—Ç, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å YP

          if (parts.length > 1) {
              const lowerText = parts[1].toLowerCase();
              if (lowerText.includes("–¥—É–±–ª—å") || lowerText.includes("le,km")) {
                orderType = "–î—É–±–ª—å";
            } else if (lowerText.includes("lost") || lowerText.includes("–¥—â—ã–µ")) {
                orderType = "LOST";
            } else if (lowerText.includes("–∑–∞—Å—ã–ª") || lowerText.includes("pfcsk")) {
                orderType = "–ó–∞—Å—ã–ª";
            } else if (lowerText.includes("–Ω–µ–≤—ã–∫—É–ø") || lowerText.includes("ytdsreg")) {
                orderType = "–ù–µ–≤—ã–∫—É–ø";
            } else {
                orderType = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"; // –ï—Å–ª–∏ —Ç–∏–ø –Ω–µ –Ω–∞–π–¥–µ–Ω
            }
          }
          oneRow = false;
      } else if (parts.length > 1 && parts[1].startsWith('LO-')) {
          cargoCode = parts[0];
          orderNumber = parts[1];
          oneRow = false;
      } else if (firstPart.startsWith('LO-')) {
          orderNumber = firstPart;
          cargoCode = parts.slice(1).join(' ').split(' ')[0]; // –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤–∞—è —á–∞—Å—Ç—å –ø–æ—Å–ª–µ –ø—Ä–æ–±–µ–ª–∞
          oneRow = false;
      } else if (firstPart.startsWith('FA254')) {
          orderNumber = firstPart;
          cargoCode = '–ê–Ω–æ–º–∞–ª–∏—è';
          orderType = "LOST";
          oneRow = false;
      }else if (/^\d{9,}-\d+$/.test(firstPart)) {
        cargoCode = firstPart;
        orderNumber = firstPart.split('-')[0];
        oneRow = false;
      }else {
          orderNumber = parts[0] || '';
          cargoCode = parts.slice(1).join(' ').split(' ')[0] || ''; // –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤–∞—è —á–∞—Å—Ç—å –ø–æ—Å–ª–µ –ø—Ä–æ–±–µ–ª–∞
          oneRow = false;
      }
  
      // –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –≥—Ä—É–∑–æ–º–µ—Å—Ç–∞
      const lowerText = line.toLowerCase();
      if (lowerText.includes("–¥—É–±–ª—å") || lowerText.includes("le,km") || lowerText.includes("–¥—É–±–ª—å") || lowerText.includes("dubll") || lowerText.includes("dubl") || lowerText.includes("duble")) {
        orderType = "–î—É–±–ª—å";
    } else if (lowerText.includes("lost") || lowerText.includes("–ª–æ—Å—Ç") || lowerText.includes("–ª–æ—Å") || lowerText.includes("–¥—â—ã–µ") || lowerText.includes("–ª—Å–æ—Ç") || lowerText.includes("–ª–æ—Å—Ç") || lowerText.includes("–ª–æc—Ç") || lowerText.includes("loost")) {
        orderType = "LOST";
    } else if (lowerText.includes("–∑–∞—Å—ã–ª") || lowerText.includes("pfcsk") || lowerText.includes("–∑—Å—ã–ª") || lowerText.includes("–∑–∞—Å–∏–ª") || lowerText.includes("–∑–∞—Å—ã–ª—å") || lowerText.includes("–∑—Å—Å—ã–ª") || lowerText.includes("–∑—Å—ã") || lowerText.includes("–∑—Å–ª—ã") || lowerText.includes("–∑–≤—Å—ã–ª")) {
        orderType = "–ó–∞—Å—ã–ª";
    } else if (lowerText.includes("–Ω–µ–≤—ã–∫—É–ø") || lowerText.includes("ytdsreg") || lowerText.includes("–Ω–µ–≤–∫—É–ø") || lowerText.includes("ytdsrb")) {
      orderType = "–ù–µ–≤—ã–ø–∫—É–ø";
  }      
  }
  
    
      const newOrderRow = document.createElement("div");
      newOrderRow.classList.add("order-row");

      newOrderRow.innerHTML = `
      <div class="orderRowNumber">${setcionNumber++}</div>

      <div class="orderData-container">
        <input
        type="text"
        class="orderData-input"
        id="orderNumber${index + 1}"
        value="${orderNumber}"
        placeholder="${
          currentRappGeneratorType === 1 || 5
          ?
          '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è'
          :
          currentRappGeneratorType === 4 
          ?
          '–ù–æ–º–µ—Ä –∞–Ω–æ–º–∞–ª–∏–∏'
          :
          '–ß—Ç–æ-—Ç–æ —Å–ª–æ–º–ª–æ—Å—å'
        }"
        required autocomplete="off">

        <label
        for="orderNumber${index + 1}"
        class="orderData-label">
        ${
          currentRappGeneratorType === 1 || 5
          ?
          '–ù–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è'
          :
          currentRappGeneratorType === 4 
          ?
          '–ù–æ–º–µ—Ä –∞–Ω–æ–º–∞–ª–∏–∏'
          :
          '–ß—Ç–æ-—Ç–æ —Å–ª–æ–º–ª–æ—Å—å'
        }
        </label>
      </div>
      <button type="button" class="switchCargo pegasusTooltip" title="–ü–æ–º–µ–Ω—è—Ç—å –º–µ—Å—Ç–∞–º–∏">
        <i class="fa-solid fa-arrows-repeat"></i>
      </button>

      <div class="orderData-container">
        <input
          type="text"
          class="orderData-input cargoGroup"
          id="cargoCode${index + 1}"
          value="${cargoCode}"
          placeholder="${
            currentRappGeneratorType === 1 || 5
            ?
            '–ö–æ–¥ –≥—Ä—É–∑–æ–º–µ—Å—Ç–∞' :
            currentRappGeneratorType === 4 
            ?
            '–¢–∏–∫–µ—Ç –∞–Ω–æ–º–∞–ª–∏–∏' 
            :
            '–ß—Ç–æ-—Ç–æ —Å–ª–æ–º–ª–æ—Å—å'
          }"
          ${oneRow === true ? 'disabled' : ''}
          autocomplete="off"
        >
        <label
          for="cargoCode${index + 1}"
          class="orderData-label">
          ${
            currentRappGeneratorType === 1 || 5
            ?
            '–ö–æ–¥ –≥—Ä—É–∑–æ–º–µ—Å—Ç–∞' 
            :
            currentRappGeneratorType === 4 
            ?
            '–¢–∏–∫–µ—Ç –∞–Ω–æ–º–∞–ª–∏–∏' 
            :
            '–ß—Ç–æ-—Ç–æ —Å–ª–æ–º–ª–æ—Å—å'
          }
        </label>
        
        ${
          currentRappGeneratorType === 4
            ? ''
            : 
            (oneRow === true
                ? 
                (currentRappGeneratorType === 1
                    ? 
                    `<button type="button" class="no-cargo buttonAutoDisabled"><i class="fa-solid fa-eye"></i></button>`
                    : 
                    `<button type="button" class="no-cargo"><i class="fa-solid fa-eye-slash"></i></button>`)
                : 
                `<button type="button" class="no-cargo"><i class="fa-solid fa-eye-slash"></i></button>`)
        }
      </div>

   

      ${
        currentRappGeneratorType === 4
        ?
        `<div class="orderData-container anomalyDescription-container">
          <input
          type="text"
          class="orderData-input"
          id="anomalyDescription${index + 1}"
          value="${anomalyDescription}"
          placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –ê–Ω–æ–º–∞–ª–∏–∏"
          required autocomplete="off">
          <label
          for="anomalyDescription${index + 1}"
          class="orderData-label">
            –û–ø–∏—Å–∞–Ω–∏–µ –ê–Ω–æ–º–∞–ª–∏–∏
          </label>
        </div>`
        :
        currentRappGeneratorType === 5
        ?
        `
        <div class="orderData-container">
          <label class="orderType" for="selectOrderType${index + 1}">
              <h1>–¢–∏–ø –≥—Ä—É–∑–æ–º–µ—Å—Ç–∞:</h1>
              <select class="selectListener" id="selectOrderType${index + 1}">
                  <option value="–ó–∞—Å—ã–ª" ${orderType === "–ó–∞—Å—ã–ª" ? 'selected' : ''}>–ó–∞—Å—ã–ª</option>
                  <option value="–î—É–±–ª—å" ${orderType === "–î—É–±–ª—å" ? 'selected' : ''}>–î—É–±–ª—å</option>
                  <option value="LOST" ${orderType === "LOST" ? 'selected' : ''}>LOST</option>
                  <option value="–ù–µ–≤—ã–∫—É–ø" ${orderType === "–ù–µ–≤—ã–∫—É–ø" ? 'selected' : ''}>–ù–µ–≤—ã–∫—É–ø</option>
                  <option value="‚Äî" ${orderType === "‚Äî" ? 'selected' : ''}>‚Äî</option>
              </select>
          </label>
        </div>`
        :
        ``
      }

      <div class="orderData-container">
        <input type="number" class="orderData-input orderData-inputCount" id="cargoCount${index + 1}" placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ" value="1" autocomplete="off" min="1">
        <label for="cargoCount${index + 1}" class="orderData-label">–ö–æ–ª-–≤–æ:</label>
      </div>

        ${currentRappGeneratorType === 1 && Math.random() < 0.01
        ?
        `
        <div class="orderData-container">
          <input
            type="text"
            class="orderData-input"
            id="orderNumber${index + 1}"
            value="–ò–ª—å—è—à–µ–Ω–∫–æ - –∫–ª–æ—É–Ω ü§°"
            placeholder="–ò–ª—å—è—à–µ–Ω–∫–æ - –∫–ª–æ—É–Ω ü§°"
            required
            readonly
            autocomplete="off">
      
          <label
            for="orderNumber${index + 1}"
            class="orderData-label">
            –ß–∏—Å—Ç–∞—è –ø—Ä–∞–≤–¥–∞:
          </label>
        </div>
        `
        :
        `` 
      }   
      `;

      ordersContainer.appendChild(newOrderRow);

      newOrderRow.querySelectorAll(".orderData-container .no-cargo").forEach(button => {
        button.addEventListener("click", function () {
          this.classList.remove('buttonAutoDisabled')
          const container = this.closest(".orderData-container"); // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
          const cargoInput = container.querySelector(".orderData-input"); // –ù–∞—Ö–æ–¥–∏–º input –≤ —ç—Ç–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
          const icon = this.querySelector("i"); // –ù–∞—Ö–æ–¥–∏–º –∏–∫–æ–Ω–∫—É –≤–Ω—É—Ç—Ä–∏ –∫–Ω–æ–ø–∫–∏
    
          cargoInput.disabled = !cargoInput.disabled; // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º disabled —É input
    
          // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∫–ª–∞—Å—Å—ã –∏–∫–æ–Ω–∫–∏
          icon.classList.toggle("fa-eye-slash", !cargoInput.disabled);
          icon.classList.toggle("fa-eye", cargoInput.disabled);
          throttledGeneratePreview()
        });
      });

      newOrderRow.querySelectorAll("input").forEach(input => {
          input.addEventListener("input", throttledGeneratePreview);
      });
  });

  document.querySelectorAll(".order-row").forEach(row => {
      row.querySelectorAll(".switchCargo").forEach(button => {
          button.addEventListener("click", function () {
              const orderInput = row.querySelector('input[id^="orderNumber"]');
              const cargoInput = row.querySelector('input[id^="cargoCode"]');
              if (!cargoInput.disabled) { // –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏, –µ—Å–ª–∏ –ø–æ–ª–µ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ
                  [orderInput.value, cargoInput.value] = [cargoInput.value, orderInput.value];
                  throttledGeneratePreview()
              }
          });
      });
  });

throttledGeneratePreview()

}
//~ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ textarea –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏—Ö –≤ order-row END

//~ –°–ª—É—à–∞—Ç–µ–ª—å —Å–æ–±—ã—Ç–∏–π –≤ TEXTAREA
document.querySelector("textarea.allOrders").addEventListener("input", function (event) {
  getDataAndMakeOrderRow(event);
});
//~ –°–ª—É—à–∞—Ç–µ–ª—å —Å–æ–±—ã—Ç–∏–π –≤ TEXTAREA END

//~ –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª

const reGenerateDocument = document.querySelector(".reGenerateDocument")
reGenerateDocument.addEventListener('click', ()=>{
  throttledGeneratePreview()
})

//~ –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª END


let timeout;
function throttledGeneratePreview() {
    clearTimeout(timeout);
    formatingAnimation()
    timeout = setTimeout(() => {
        generatePreview();
    }, 2000);
}

document.querySelectorAll(".orderData-container .no-cargo").forEach(button => {
  button.addEventListener("click", function () {
    this.classList.remove('buttonAutoDisabled')
    const container = this.closest(".orderData-container"); // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    const cargoInput = container.querySelector(".orderData-input"); // –ù–∞—Ö–æ–¥–∏–º input –≤ —ç—Ç–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
    const icon = this.querySelector("i"); // –ù–∞—Ö–æ–¥–∏–º –∏–∫–æ–Ω–∫—É –≤–Ω—É—Ç—Ä–∏ –∫–Ω–æ–ø–∫–∏

    cargoInput.disabled = !cargoInput.disabled; // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º disabled —É input

    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∫–ª–∞—Å—Å—ã –∏–∫–æ–Ω–∫–∏
    icon.classList.toggle("fa-eye-slash", !cargoInput.disabled);
    icon.classList.toggle("fa-eye", cargoInput.disabled);
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
document.getElementById("recipient").addEventListener("change", throttledGeneratePreview);
document.querySelectorAll("input, select").forEach(input => {
  input.addEventListener("input", throttledGeneratePreview);
});

document.addEventListener("DOMContentLoaded", () => {
  const observer = new MutationObserver(() => {
    attachSelectListeners();
  });

  const ordersContainer = document.querySelector("#orders-container");
  if (ordersContainer) {
    observer.observe(ordersContainer, { childList: true, subtree: true });
  } else {
    console.warn("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä #orders-container –Ω–µ –Ω–∞–π–¥–µ–Ω.");
  }

  function attachSelectListeners() {
    const selectElements = document.querySelectorAll(".selectListener");

    if (selectElements.length === 0) {
      console.warn("–≠–ª–µ–º–µ–Ω—Ç—ã —Å –∫–ª–∞—Å—Å–æ–º .selectListener –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
      return;
    }

    selectElements.forEach(option => {
      if (!option.dataset.listenerAttached) { // –ß—Ç–æ–±—ã –Ω–µ –≤–µ—à–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ
        option.dataset.listenerAttached = "true";
        option.addEventListener("change", () => {
          if (typeof throttledGeneratePreview === "function") {
            throttledGeneratePreview();
          } else {
            console.error("–§—É–Ω–∫—Ü–∏—è throttledGeneratePreview –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
          }
        });
      }
    });
  }

  attachSelectListeners(); // –í—ã–∑—ã–≤–∞–µ–º —Å—Ä–∞–∑—É, –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —É–∂–µ –µ—Å—Ç—å
});


function getDateToday(){
  const today = new Date().toLocaleDateString();
  document.getElementById("dateDisplay").innerText = today;
  throttledGeneratePreview()
}
getDateToday()

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF
function generatePDF() {
  const { jsPDF } = window.jspdf;
  const doc = new jsPDF();

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à—Ä–∏—Ñ—Ç–∞
  doc.addFont("Roboto-Regular.ttf", "Roboto", "normal");
  doc.setFont("Roboto");

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
  const sender = document.getElementById("sender").value;
  const recipient = document.getElementById("recipient").value;
  // const actNumber = document.getElementById("actNumber");
  // let actNumber_data = null;
  // actNumber.value =
  const date = document.getElementById("dateDisplay").innerText;

  const actNumber = document.getElementById("actNumber");
  const typeMap = { 1: "m", 2: "c", 3: "s", 4: "a", 5: "z" };
  const randomString = Array.from({ length: 8 }, () => 
    Math.random() < 0.5 
      ? String.fromCharCode(48 + Math.floor(Math.random() * 10))
      : String.fromCharCode(65 + Math.floor(Math.random() * 26) + (Math.random() < 0.5 ? 32 : 0))).join("");
  let actNumber_data = `iRDG-${typeMap[currentRappGeneratorType] || "e"}:${randomString}`;
  actNumber.value = actNumber_data;

  // –ê–¥—Ä–µ—Å–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
  const recipientAddresses = {
    "–°–¶ –î–æ–º–æ–¥–µ–¥–æ–≤–æ –ï–í–°–¶": "–ú–∏–∫—Ä–æ—Ä–∞–π–æ–Ω –ë–µ–ª—ã–µ –°—Ç–æ–ª–±—ã, –¥. –≤–ª–∞–¥–µ–Ω–∏–µ –°–∫–ª–∞–¥—ã 104, —Å—Ç—Ä. 6/1",
    "–°–¶ –Ø–Ω–¥–µ–∫—Å –ú–∞—Ä–∫–µ—Ç –°–æ—Ñ—å–∏–Ω–æ –§–§–¶": "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫ –°–æ—Ñ—å–∏–Ω–æ, –†–∞–º–µ–Ω—Å–∫–∏–π –≥–æ—Ä–æ–¥—Å–∫–æ–π –æ–∫—Ä—É–≥, –¥–æ–º –∫1, —Å—Ç—Ä–æ–µ–Ω–∏–µ 3/1",
    "–°–¶ –Ø–Ω–¥–µ–∫—Å –ú–∞—Ä–∫–µ—Ç –°–æ—Ñ—å–∏–Ω–æ –°—É–ø–µ—Ä—Å–∫–ª–∞–¥": "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫ –°–æ—Ñ—å–∏–Ω–æ, –†–∞–º–µ–Ω—Å–∫–∏–π –≥–æ—Ä–æ–¥—Å–∫–æ–π –æ–∫—Ä—É–≥, –¥–æ–º 2/1",
    "–°–¶ –Ø–Ω–¥–µ–∫—Å –ú–∞—Ä–∫–µ—Ç –°–æ—Ñ—å–∏–Ω–æ –ö–ì–¢": "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –†–∞–º–µ–Ω—Å–∫–∏–π –≥–æ—Ä–æ–¥—Å–∫–æ–π –æ–∫—Ä—É–≥, —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫ –°–æ—Ñ—å–∏–Ω–æ, —Å4",
    "–°–¶ –¢–∞—Ä–Ω—ã–π (–¢–∞—Ä–Ω—ã–π –î—Ä–æ–ø–æ—Ñ—Ñ)": "–≥. –ú–æ—Å–∫–≤–∞, –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è, –¥–æ–º 12A",
    "–°–¶ –õ–∏–ø–µ—Ü–∫" : "–õ–∏–ø–µ—Ü–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –≥–æ—Ä–æ–¥—Å–∫–æ–π –æ–∫—Ä—É–≥ –õ–∏–ø–µ—Ü–∫, –õ–∏–ø–µ—Ü–∫, –ë–∞–∑–∞—Ä–Ω–∞—è —É–ª–∏—Ü–∞, –¥. —É—á3–ê",
    "–°–¶ –ö—É—Ä—Å–∫" : "–ö—É—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –≥–æ—Ä–æ–¥—Å–∫–æ–π –æ–∫—Ä—É–≥ –ö—É—Ä—Å–∫, –ö—É—Ä—Å–∫, –ø—Ä–æ—Å–ø–µ–∫—Ç –õ–µ–Ω–∏–Ω—Å–∫–æ–≥–æ –ö–æ–º—Å–æ–º–æ–ª–∞, –¥. 49",
    "–°–¶ –ë–µ–ª–≥–æ—Ä–æ–¥" : "–ë–µ–ª–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ë–µ–ª–≥–æ—Ä–æ–¥, –ë–µ–ª–≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞ –ú–∏—á—É—Ä–∏–Ω–∞, –¥. 104",
    "–°–¶ –†–æ—Å—Ç–æ–≤": "–†–æ—Å—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –ù–æ–≤–æ—á–µ—Ä–∫–∞—Å—Å–∫–æ–µ —à–æ—Å—Å–µ, –ê–∫—Å–∞–π—Å–∫–∏–π —Ä–∞–π–æ–Ω, –¥–æ–º 111, –∫–æ—Ä–ø—É—Å 2",
    "–°–¶ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä": "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä, –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π, –ü–æ–¥—Å–æ–ª–Ω–µ—á–Ω–∞—è —É–ª–∏—Ü–∞, –¥. 44",
    "–†–æ—Å—Ç–æ–≤ –ö–ì–¢": "—É–ª–∏—Ü–∞ –õ–æ–≥–æ–ø–∞—Ä–∫, 5, –†–æ—Å—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –ê–∫—Å–∞–π—Å–∫–∏–π —Ä–∞–π–æ–Ω",
    "–°–¶ –°—Ç—Ä–æ–≥–∏–Ω–æ": "–≥. –ú–æ—Å–∫–≤–∞, —É–ª. 2-—è –õ—ã–∫–æ–≤—Å–∫–∞—è, –¥. 63, —Å—Ç—Ä. 6.",
    "–°–¶ –î–∑–µ—Ä–∂–∏–Ω—Å–∫–∏–π": "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –°–∞–¥–æ–≤–∞—è —É–ª–∏—Ü–∞, –≥–æ—Ä–æ–¥—Å–∫–æ–π –æ–∫—Ä—É–≥ –î–∑–µ—Ä–∂–∏–Ω—Å–∫–∏–π, –¥–æ–º 6",
    "–°–¶ –¢—Ä–æ–∏—Ü–∫–∏–π": "–≥. –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ó–∞–ø–æ—Ä–æ–∂—Å–∫–∞—è —É–ª. , –¥.12",
    "–°–¶ –ö–∞–∑–∞–Ω—å": "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω, –ü–æ—á—Ç–æ–≤–∞—è —É–ª–∏—Ü–∞, –õ–∞–∏—à–µ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω, –¥–æ–º 1",
    "–°–¶ –ó–∞–ø–∞–¥": "–≥. –ú–æ—Å–∫–≤–∞, –ë–µ—Ä–µ–∂–∫–æ–≤—Å–∫–∞—è –Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è, 20—Å9",
    "–°–¶ –°–∞–º–∞—Ä–∞": "–°–º–∞—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, —Å–µ–ª—å—Å–∫–æ–µ –ø–æ—Å–µ–ª–µ–Ω–∏–µ –í–µ—Ä—Ö–Ω—è—è –ü–æ–¥—Å—Ç–µ–ø–Ω–æ–≤–∫–∞, —Å–µ–ª–æ –ü—Ä–µ–æ–±—Ä–∞–∂–µ–Ω–∫–∞, –ò–Ω–¥—É—Å—Ç—Ä–∏–∞–ª—å–Ω–∞—è —É–ª–∏—Ü–∞, –í–æ–ª–∂—Å–∫–∏–π —Ä–∞–π–æ–Ω, –¥–æ–º 1–ë/1",
    "–°–¶ –ì—Ä–∏–±–∫–∏": "–ê–Ω–≥–∞—Ä—Å–∫–∞—è —É–ª., –≤–ª8—Å12, –¥. –ì—Ä–∏–±–∫–∏",
    "–°–¶ –°—Ç–∞–≤—Ä–æ–ø–æ–ª—å": "–≥. –°—Ç–∞–≤—Ä–æ–ø–æ–ª—å –°—Ç–∞—Ä–æ–º–∞—Ä—å–µ–≤—Å–∫–æ–µ —à–æ—Å—Å–µ 13/8",
    "–°–¶ –î–º–∏—Ç—Ä–æ–≤—Å–∫–æ–µ": "–≥. –ú–æ—Å–∫–≤–∞, –î–º–∏—Ç—Ä–æ–≤—Å–∫–æ–µ —à–æ—Å—Å–µ, 157—Å12",
    "–°–¶ –°–ü–ë –ë—É–≥—Ä—ã": "–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –í—Å–µ–≤–æ–ª–æ–∂—Å–∫–∏–π —Ä–∞–π–æ–Ω, –ë—É–≥—Ä–æ–≤—Å–∫–æ–µ –≥–æ—Ä–æ–¥—Å–∫–æ–µ –ø–æ—Å–µ–ª–µ–Ω–∏–µ, –ö–ê–î, 23-–π –∫–∏–ª–æ–º–µ—Ç—Ä, –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –∫–æ–ª—å—Ü–æ, 3",
    "–°–¶ –õ–µ–Ω–∏–Ω—Å–∫–∏–µ –≥–æ—Ä–∫–∏": "–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–æ–µ–∑–¥, –¥. 7–ê",
    "–°–¶ –ú—É—Ä–æ–º" : "–í–ª–∞–¥–∏–º–∏—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –æ–∫—Ä—É–≥ –ú—É—Ä–æ–º, –ú—É—Ä–æ–º, –í–ª–∞–¥–∏–º–∏—Ä—Å–∫–æ–µ —à–æ—Å—Å–µ, –¥9",
    "–°–¶ –ß–µ–ª—è–±–∏–Ω—Å–∫" : "–ß–µ–ª—è–±–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –≥–æ—Ä–æ–¥—Å–∫–æ–π –æ–∫—Ä—É–≥ –ß–µ–ª—è–±–∏–Ω—Å–∫, –ß–µ–ª—è–±–∏–Ω—Å–∫, —É–ª–∏—Ü–∞ –ú–æ–Ω—Ç–∞–∂–Ω–∏–∫–æ–≤, –¥16",
    "–°–¶ –ß–µ–±–æ–∫—Å–∞—Ä—ã" : "–ß—É–≤–∞—à—Å–∫–∞—è —Ä–µ—Å–ø—É–±–ª–∏–∫–∞, –≥–æ—Ä–æ–¥—Å–∫–æ–π –æ–∫—Ä—É–≥ –ß–µ–±–æ–∫—Å–∞—Ä—ã, –ß–µ–±–æ–∫—Å–∞—Ä—ã, –ì–∞—Ä–∞–∂–Ω—ã–π –ø—Ä–æ–µ–∑–¥, –¥ 3/1",
    "–°–¶ –ò–∂–µ–≤—Å–∫" : "–£–¥–º—É—Ä—Ç—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞, –≥–æ—Ä–æ–¥—Å–∫–æ–π –æ–∫—Ä—É–≥ –ò–∂–µ–≤—Å–∫, –ò–∂–µ–≤—Å–∫, —É–ª–∏—Ü–∞ –ü–æ–π–º–∞, –¥. 105",
    "–°–¶ –¢—é–º–µ–Ω—å" : "–¢—é–º–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –≥–æ—Ä–æ–¥—Å–∫–æ–π –æ–∫—Ä—É–≥ –¢—é–º–µ–Ω—å, –¢—é–º–µ–Ω—å, –ö–æ–º–º—É–Ω–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —É–ª–∏—Ü–∞, –¥ 47, —Å—Ç—Ä. 12",
    "–°–¶ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥" : "–°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥, –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥, –°–µ—Ä–æ–≤—Å–∫–∏–π —Ç—Ä–∞–∫—Ç, 11-–π –∫–∏–ª–æ–º–µ—Ç—Ä, –¥. 5, —Å—Ç—Ä. 1",
    "–°–¶ –ù–∞–±–µ—Ä–µ–∂–Ω—ã–µ –ß–µ–ª–Ω—ã" : "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω, –≥–æ—Ä–æ–¥—Å–∫–æ–π –æ–∫—Ä—É–≥ –ù–∞–±–µ—Ä–µ–∂–Ω—ã–µ –ß–µ–ª–Ω—ã, –ù–∞–±–µ—Ä–µ–∂–Ω—ã–µ –ß–µ–ª–Ω—ã, –ú–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è —É–ª–∏—Ü–∞, –¥. 39",
    "–°–¶ –û—Ä–µ–Ω–±—É—Ä–≥" : "–û—Ä–µ–Ω–±—É—Ä–≥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –≥–æ—Ä–æ–¥—Å–∫–æ–π –æ–∫—Ä—É–≥ –û—Ä–µ–Ω–±—É—Ä–≥, –û—Ä–µ–Ω–±—É—Ä–≥, –ë–µ–ª—è–µ–≤—Å–∫–∞—è —É–ª–∏—Ü–∞, –¥. 4",
    "–°–¶ –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫" : "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –¢–æ–¥–º–∞—á—ë–≤—Å–∫–∏–π —Å–µ–ª—å—Å–æ–≤–µ—Ç, –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ-—Å–∫–ª–∞–¥—Å–∫–∞—è –∑–æ–Ω–∞, –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ-—Å–∫–ª–∞–¥—Å–∫–∞—è –∑–æ–Ω–∞, –¥. 7",
    "–°–¶ –ë–∞—Ä–Ω–∞—É–ª" : "–ê–ª—Ç–∞–π—Å–∫–∏–π –∫—Ä–∞–π, –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ë–∞—Ä–Ω–∞—É–ª, –ë–∞—Ä–Ω–∞—É–ª, —É–ª–∏—Ü–∞ –ß–µ—Ä–Ω—ã—à–µ–≤—Å–∫–æ–≥–æ, –¥ 293–ë",
    "–°–¶ –í–æ–ª–æ–≥–¥–∞" : "–í–æ–ª–æ–≥–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –≥–æ—Ä–æ–¥—Å–∫–æ–π –æ–∫—Ä—É–≥ –í–æ–ª–æ–≥–¥–∞, –í–æ–ª–æ–≥–¥–∞, –ê–Ω–∞–Ω—å–∏–Ω—Å–∫–∏–π –ø–µ—Ä–µ—É–ª–æ–∫, –¥. 14",
    "–°–¶ –°–º–æ–ª–µ–Ω—Å–∫" : "–°–º–æ–ª–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –°–º–æ–ª–µ–Ω—Å–∫, –°–º–æ–ª–µ–Ω—Å–∫, –ö—Ä–∞—Å–Ω–∏–Ω—Å–∫–æ–µ —à–æ—Å—Å–µ, –¥. 27"
  };

  // –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–∞—Ö
  const orders = [];
  let totalCargoCount = 0;
  
  document.querySelectorAll(".order-row").forEach((row, index) => {
    const orderNumber = row.querySelector(`#orderNumber${index + 1}`).value;
    const cargoCode = row.querySelector(`#cargoCode${index + 1}`).value;
    const anomalyDescriptionInit = row.querySelector(`#anomalyDescription${index + 1}`);
    const orderTypeInit = row.querySelector(`#selectOrderType${index + 1}`);
    let anomalyDescription = anomalyDescriptionInit ? anomalyDescriptionInit.value : null;
    let orderType = orderTypeInit ? orderTypeInit.value : "‚Äî";
    const cargoCount = parseInt(row.querySelector(`#cargoCount${index + 1}`).value);
    const isCargoDisabled = row.querySelector(`#cargoCode${index + 1}`).disabled;
    
    totalCargoCount += cargoCount;
  
    if(currentRappGeneratorType === 1){
      //~ –ú–ê–ì–ò–°–¢–†–ê–õ–ò ‚Ä¢ –ú–ê–ì–ò–°–¢–†–ê–õ–ò ‚Ä¢ –ú–ê–ì–ò–°–¢–†–ê–õ–ò
      if (isCargoDisabled) {
        orders.push([
          { content: (index + 1).toString(), styles: { font: "Roboto", cellWidth: 10 } }, // –£–∑–∫–∏–π —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è ‚Ññ –ø/–ø
          { content: orderNumber, colSpan: 2, styles: { font: "Roboto", fontSize: 14, fontStyle: "bold" } },
          { content: cargoCount.toString(), styles: { font: "Roboto" } }
        ]);
      }else {
        orders.push([
          { content: (index + 1).toString(), styles: { font: "Roboto", cellWidth: 10 } }, // –£–∑–∫–∏–π —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è ‚Ññ –ø/–ø
          { content: orderNumber, styles: { font: "Roboto", fontSize: 14, fontStyle: "bold" } },
          { content: cargoCode, styles: { font: "Roboto", fontSize: 14, fontStyle: "bold" } },
          { content: cargoCount.toString(), styles: { font: "Roboto" } }
        ]);
      }
    }else if(currentRappGeneratorType === 4){
      //~ –ê–ù–û–ú–ê–õ–ò–ò ‚Ä¢ –ê–ù–û–ú–ê–õ–ò–ò ‚Ä¢ –ê–ù–û–ú–ê–õ–ò–ò
      orders.push([
        { content: (index + 1).toString(), styles: { font: "Roboto", cellWidth: 10 } }, // –£–∑–∫–∏–π —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è ‚Ññ –ø/–ø
        { content: orderNumber, styles: { font: "Roboto", fontSize: 12, fontStyle: "bold" } },
        { content: cargoCode, styles: { font: "Roboto", fontSize: 12, fontStyle: "bold" } },
        { content: anomalyDescription, styles: { font: "Roboto", fontSize: 9, fontStyle: "bold" } },
        { content: cargoCount.toString(), styles: { font: "Roboto" } }
      ]);
    }else if(currentRappGeneratorType === 5){
      //~ –î–£–ë–õ–ò/–ó–ê–°–´–õ–´/LOST ‚Ä¢ –î–£–ë–õ–ò/–ó–ê–°–´–õ–´/LOST ‚Ä¢ –î–£–ë–õ–ò/–ó–ê–°–´–õ–´/LOST
      orders.push([
        { content: (index + 1).toString(), styles: { font: "Roboto", cellWidth: 10 } }, // –£–∑–∫–∏–π —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è ‚Ññ –ø/–ø
        { content: orderNumber, styles: { font: "Roboto", fontSize: 14, fontStyle: "bold" } },
        { content: cargoCode, styles: { font: "Roboto", fontSize: 14, fontStyle: "bold" } },
        { content: orderType, styles: { font: "Roboto", fontSize: 14, fontStyle: "bold" } },
        { content: cargoCount.toString(), styles: { font: "Roboto" } }
      ]);
    }
  });
  // –°—Ç—Ä–æ–∫–∞ "–ò—Ç–æ–≥–æ"
  let totalRow = []
  if(currentRappGeneratorType === 1){
    //~ –ú–ê–ì–ò–°–¢–†–ê–õ–ò ‚Ä¢ –ú–ê–ì–ò–°–¢–†–ê–õ–ò ‚Ä¢ –ú–ê–ì–ò–°–¢–†–ê–õ–ò
    totalRow = [
      { 
        content: "–ò—Ç–æ–≥–æ:", 
        colSpan: 3,
        styles: { 
          font: "Roboto",
          halign: "left", // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é
          valign: "middle", // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ —Ü–µ–Ω—Ç—Ä—É –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ
          lineWidth: 0.25, // –ì—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –≤—Å–µ–π —Å—Ç—Ä–æ–∫–∏
          lineColor: [0, 0, 0], // –¶–≤–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã
          fontSize: 12,
          fillColor: false
        }
      },
      { 
        content: totalCargoCount.toString(),
        styles: { 
          font: "Roboto",
          halign: "center", // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ —Ü–µ–Ω—Ç—Ä—É
          lineWidth: 0.25, // –ì—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –≤—Å–µ–π —Å—Ç—Ä–æ–∫–∏
          lineColor: [0, 0, 0] // –¶–≤–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã
        }
      }
    ];
  }else if(currentRappGeneratorType === 4 || currentRappGeneratorType === 5){
    //~ –ê–ù–û–ú–ê–õ–ò–ò ‚Ä¢ –ê–ù–û–ú–ê–õ–ò–ò ‚Ä¢ –ê–ù–û–ú–ê–õ–ò–ò ‚óã –î–£–ë–õ–ò/–ó–ê–°–´–õ–´/LOST ‚Ä¢ –î–£–ë–õ–ò/–ó–ê–°–´–õ–´/LOST ‚Ä¢ –î–£–ë–õ–ò/–ó–ê–°–´–õ–´/LOST
    totalRow = [
      { 
        content: "–ò—Ç–æ–≥–æ:", 
        colSpan: 4,
        styles: { 
          font: "Roboto",
          halign: "left", // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é
          valign: "middle", // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ —Ü–µ–Ω—Ç—Ä—É –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ
          lineWidth: 0.25, // –ì—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –≤—Å–µ–π —Å—Ç—Ä–æ–∫–∏
          lineColor: [0, 0, 0], // –¶–≤–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã
          fontSize: 12,
          fillColor: false
        }
      },
      { 
        content: totalCargoCount.toString(),
        styles: { 
          font: "Roboto",
          halign: "center", // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ —Ü–µ–Ω—Ç—Ä—É
          lineWidth: 0.25, // –ì—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –≤—Å–µ–π —Å—Ç—Ä–æ–∫–∏
          lineColor: [0, 0, 0] // –¶–≤–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã
        }
      }
    ];
  }

  // –°—Ç–∏–ª–∏ —Ç–∞–±–ª–∏—Ü—ã
  let tableStyles = {};
  if(currentRappGeneratorType === 1){
    //~ –ú–ê–ì–ò–°–¢–†–ê–õ–ò ‚Ä¢ –ú–ê–ì–ò–°–¢–†–ê–õ–ò ‚Ä¢ –ú–ê–ì–ò–°–¢–†–ê–õ–ò
    tableStyles = {
      headStyles: {
        fillColor: [211, 211, 211],
        textColor: [0, 0, 0],
        fontSize: 10,
        font: "Roboto",
        fontSize: 12,
        lineWidth: 0.25,
        lineColor: [0, 0, 0],
        halign: "center",
        valign: "middle",
      },
      bodyStyles: {
        halign: "center",
        valign: "middle",
        cellPadding: 2,
        lineWidth: 0.25,
        lineColor: [0, 0, 0],
        textColor: [0, 0, 0],
        font: "Roboto"
      },
      columnStyles: {
        0: { cellWidth: 10 }, // –£–∑–∫–∏–π —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è ‚Ññ –ø/–ø
        1: { cellWidth: 82 },
        2: { cellWidth: 82 },
        3: { cellWidth: 25 }
      }
    }
  }else if(currentRappGeneratorType === 4){
    //~ –ê–ù–û–ú–ê–õ–ò–ò ‚Ä¢ –ê–ù–û–ú–ê–õ–ò–ò ‚Ä¢ –ê–ù–û–ú–ê–õ–ò–ò
    tableStyles = {
      headStyles: {
        fillColor: [211, 211, 211],
        textColor: [0, 0, 0],
        fontSize: 10,
        font: "Roboto",
        fontSize: 12,
        lineWidth: 0.25,
        lineColor: [0, 0, 0],
        halign: "center",
        valign: "middle",
      },
      bodyStyles: {
        halign: "center",
        valign: "middle",
        cellPadding: 2,
        lineWidth: 0.25,
        lineColor: [0, 0, 0],
        textColor: [0, 0, 0],
        font: "Roboto"
      },
      columnStyles: {
        0: { cellWidth: 10 }, // –£–∑–∫–∏–π —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è ‚Ññ –ø/–ø
        1: { cellWidth: 55 },
        2: { cellWidth: 46 },
        3: { cellWidth: 65 },
        4: { cellWidth: 25 }
      }
    }
  }else if(currentRappGeneratorType === 5){
    //~ –î–£–ë–õ–ò/–ó–ê–°–´–õ–´/LOST ‚Ä¢ –î–£–ë–õ–ò/–ó–ê–°–´–õ–´/LOST ‚Ä¢ –î–£–ë–õ–ò/–ó–ê–°–´–õ–´/LOST
    tableStyles = {
      headStyles: {
        fillColor: [211, 211, 211],
        textColor: [0, 0, 0],
        fontSize: 10,
        font: "Roboto",
        fontSize: 12,
        lineWidth: 0.25,
        lineColor: [0, 0, 0],
        halign: "center",
        valign: "middle",
      },
      bodyStyles: {
        halign: "center",
        valign: "middle",
        cellPadding: 2,
        lineWidth: 0.25,
        lineColor: [0, 0, 0],
        textColor: [0, 0, 0],
        font: "Roboto"
      },
      columnStyles: {
        0: { cellWidth: 10 }, // –£–∑–∫–∏–π —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è ‚Ññ –ø/–ø
        1: { cellWidth: 65 },
        2: { cellWidth: 65 },
        3: { cellWidth: 35 },
        4: { cellWidth: 25 }
      }
    }
  }

  // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
  doc.setFontSize(14);
  doc.text(`–ê–∫—Ç –ø—Ä–∏–µ–º–∞-–ø–µ—Ä–µ–¥–∞—á–∏ ‚Ññ${actNumber.value} –æ—Ç ${date}`, 105, 40, { align: 'center' });

  doc.setFontSize(12);
  doc.text(`–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ${sender}`, 5, 65);
  doc.text("–ê–¥—Ä–µ—Å –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: –í–æ—Ä–æ–Ω–µ–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –ê–π–¥–∞—Ä–æ–≤—Å–∫–æ–µ —Å–µ–ª—å—Å–∫–æ–µ –ø–æ—Å–µ–ª–µ–Ω–∏–µ, 2-—è –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è –∑–æ–Ω–∞, –¥. 27", 5, 70, { maxWidth: 190 });
  doc.text(`–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${recipient}`, 5, 90);
  doc.text(`–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è: ${recipientAddresses[recipient]}`, 5, 95, { maxWidth: 190 });
  doc.text("–ó–∞–∫–∞–∑—á–∏–∫: –û–û–û ¬´–Ø–Ω–¥–µ–∫—Å¬ª", 5, 110);
  doc.setFontSize(10);
  doc.text("–ù–∞—Å—Ç–æ—è—â–∏–π –∞–∫—Ç —Å–æ—Å—Ç–∞–≤–ª–µ–Ω –æ —Ç–æ–º, —á—Ç–æ –≤ –¥–∞—Ç—É –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –ê–∫—Ç–∞ –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–º –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–µ—Ä–µ–¥–∞–ª, –∞ –ü–æ–ª—É—á–∞—Ç–µ–ª—å –ø—Ä–∏–Ω—è–ª —Å–ª–µ–¥—É—é—â–∏–µ –Ω–∏–∂–µ—É–∫–∞–∑–∞–Ω–Ω—ã–µ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–Ω–æ–º–µ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –ü–û –°–¶)/–≥—Ä—É–∑–æ–º–µ—Å—Ç–∞ —Å –≤–∏–∑—É–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π (–µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ —Ñ–∏—Ä–º–µ–Ω–Ω–æ–π) —É–ø–∞–∫–æ–≤–∫–∏, –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –ø–µ—Ä–µ—Å—á—ë—Ç–∞ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–π:", 5, 115, { maxWidth: 190, fontSize: 10 });
  doc.setTextColor("#000");

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã
  if(currentRappGeneratorType === 1){
    //~ –ú–ê–ì–ò–°–¢–†–ê–õ–ò ‚Ä¢ –ú–ê–ì–ò–°–¢–†–ê–õ–ò ‚Ä¢ –ú–ê–ì–ò–°–¢–†–ê–õ–ò
    doc.autoTable({
      startY: 135,
      head: [["‚Ññ –ø/–ø", "–ù–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ –∑–∞–∫–∞–∑—á–∏–∫–∞", "–ö–æ–¥ –≥—Ä—É–∑–æ–º–µ—Å—Ç–∞", "–ö–æ–ª-–≤–æ –≥—Ä—É–∑–æ–º–µ—Å—Ç"]],
      body: [...orders, totalRow],
      margin: { left: 5 },
      ...tableStyles,
      didParseCell: function(data) {
        if (data.row.index === orders.length) {
          // –ü—Ä–∏–º–µ–Ω—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —Å—Ç—Ä–æ–∫–∏ "–ò—Ç–æ–≥–æ"
          data.cell.styles.lineWidth = 0.25;
          data.cell.styles.lineColor = [0, 0, 0];
        }
      }
    });
  }else if(currentRappGeneratorType === 4){
    //~ –ê–ù–û–ú–ê–õ–ò–ò ‚Ä¢ –ê–ù–û–ú–ê–õ–ò–ò ‚Ä¢ –ê–ù–û–ú–ê–õ–ò–ò
    doc.autoTable({
      startY: 135,
      head: [["‚Ññ –ø/–ø", "–ù–æ–º–µ—Ä –∞–Ω–æ–º–∞–ª–∏–∏", "–¢–∏–∫–µ—Ç", "–û–ø–∏—Å–∞–Ω–∏–µ", "–ö–æ–ª-–≤–æ –≥—Ä—É–∑–æ–º–µ—Å—Ç"]],
      body: [...orders, totalRow],
      margin: { left: 5 },
      ...tableStyles,
      didParseCell: function(data) {
        if (data.row.index === orders.length) {
          // –ü—Ä–∏–º–µ–Ω—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —Å—Ç—Ä–æ–∫–∏ "–ò—Ç–æ–≥–æ"
          data.cell.styles.lineWidth = 0.25;
          data.cell.styles.lineColor = [0, 0, 0];
        }
      }
    });
  }else if(currentRappGeneratorType === 5){
    //~ –î–£–ë–õ–ò/–ó–ê–°–´–õ–´/LOST ‚Ä¢ –î–£–ë–õ–ò/–ó–ê–°–´–õ–´/LOST ‚Ä¢ –î–£–ë–õ–ò/–ó–ê–°–´–õ–´/LOST
    doc.autoTable({
      startY: 135,
      head: [["‚Ññ –ø/–ø", "–ù–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ –∑–∞–∫–∞–∑—á–∏–∫–∞", "–ö–æ–¥ –≥—Ä—É–∑–æ–º–µ—Å—Ç–∞", "–¢–∏–ø –≥—Ä—É–∑–æ–º–µ—Å—Ç–∞", "–ö–æ–ª-–≤–æ –≥—Ä—É–∑–æ–º–µ—Å—Ç"]],
      body: [...orders, totalRow],
      margin: { left: 5 },
      ...tableStyles,
      didParseCell: function(data) {
        if (data.row.index === orders.length) {
          // –ü—Ä–∏–º–µ–Ω—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —Å—Ç—Ä–æ–∫–∏ "–ò—Ç–æ–≥–æ"
          data.cell.styles.lineWidth = 0.25;
          data.cell.styles.lineColor = [0, 0, 0];
        }
      }
    });
  }

  // –ü–æ–¥–ø–∏—Å–∏
  const finalY = doc.lastAutoTable.finalY + 5;
  doc.text("–ü–µ—Ä–µ–¥–∞–ª –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å", 5, finalY);
  doc.text("_________________/_________________", 5, finalY + 14);
  doc.text("–ü—Ä–∏–Ω—è–ª –ü–æ–ª—É—á–∞—Ç–µ–ª—å", 135, finalY);
  doc.text("_________________/_________________", 135, finalY + 14);

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω—É–º–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü
  const pageCount = doc.internal.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(10);
    doc.setFont("Roboto");
    doc.text(
      `${i}/${pageCount}`, 
      doc.internal.pageSize.width - 5, 
      doc.internal.pageSize.height - 5, 
      { align: "right" }
    );
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é
  
  const pdfBlob = doc.output("blob");

  // –°–æ–∑–¥–∞—ë–º —Å—Å—ã–ª–∫—É –Ω–∞ Blob –∏ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
  const blobUrl = URL.createObjectURL(pdfBlob);
  
  const pdfPrintLink = document.querySelector(".pdfPrint");
  if (pdfPrintLink) {
      pdfPrintLink.href = blobUrl;
      pdfPrintLink.target = "_blank";
  } else {
      console.error("–≠–ª–µ–º–µ–Ω—Ç <a id='pdfPrint'> –Ω–µ –Ω–∞–π–¥–µ–Ω!");
  }

  
  
// –ß–∏—Ç–∞–µ–º Blob –∏ –ø–µ—Ä–µ–¥–∞—ë–º –≤ PDF.js
const reader = new FileReader();
reader.onload = function () {
    renderPDF(new Uint8Array(reader.result)); // –¢–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
};
reader.readAsArrayBuffer(pdfBlob);

}

//! START

let isRendering = false;
const reader = new FileReader();
reader.onload = function () {
    if (!isRendering) {
        isRendering = true;
        renderPDF(new Uint8Array(reader.result))
            .finally(() => {
                isRendering = false;
            });
    }
};
reader.readAsArrayBuffer(pdfBlob);

let generateRenderTime = 0;

async function renderPDF(pdfData) {
  containerCanvas_highlightColor = "#b3ff00"
  const pdfjsLib = window['pdfjsLib'];
  pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.9.179/pdf.worker.min.js';

  
  let statusFinishIcon = document.querySelector(".statusFinishIcon")
  if(statusFinishIcon){
    statusFinishIcon.style.setProperty("--statusDanceColor", "179, 255, 0");
  }

  const pdf = await pdfjsLib.getDocument({ data: pdfData }).promise;
  const canvasContainer = document.getElementById("canvasContainer");
  canvasContainer.innerHTML = `
          <div class="previewScaleControl">
          <div class="previewScaleControlContainer">
            <button class="previewScale-btn previewScale-minus-btn">
              <i class="fa-solid fa-minus"></i>
            </button>
            <p class="scalePersent">100%</p>
            <button class="previewScale-btn previewScale-plus-btn">
              <i class="fa-solid fa-plus"></i>
            </button>
          </div>
        </div>
  `;

  const renderedPages = new Set(); // –•—Ä–∞–Ω–∏–º —É–∂–µ –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã

  // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
  const loaderContainer = document.createElement("div");
  loaderContainer.classList.add("loaderContainer");

  // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç "–†–µ–Ω–¥–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞..."
  const loaderContainerText = document.createElement("div");
  loaderContainerText.classList.add("loaderContainerText", "loaderContainerTextRender");
  loaderContainerText.innerText = "–†–µ–Ω–¥–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞";
  loaderContainer.appendChild(loaderContainerText);

  let dots = 0;
  const loadingInterval = setInterval(() => {
    loaderContainerText.innerText = "–†–µ–Ω–¥–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞" + ".".repeat(dots);
    dots = (dots + 1) % 4;
  }, 150);

  // –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥ –∑–∞–≥—Ä—É–∑–∫–∏
  const loadingCircle = document.createElement("div");
  loadingCircle.classList.add("loaderContainerCircle", "loaderContainerCircleRender");
  const loaderContainerIcon = document.createElement("i");
  loaderContainerIcon.classList.add("loaderContainerIcon", "loaderContainerIconRender", "fa-solid", "fa-pen-ruler", "fa-beat-fade");

  loaderContainer.appendChild(loadingCircle);
  loaderContainer.appendChild(loaderContainerIcon);
  canvasContainer.appendChild(loaderContainer);

  // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ canvas –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
  Array.from(canvasContainer.getElementsByTagName("canvas")).forEach(c => c.style.display = "none");
  canvasContainer.style.overflowY = "hidden";

  // –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ—Ç—Å—á–µ—Ç–∞
  const startTime = Date.now();

  for (let i = 1; i <= pdf.numPages; i++) {
    if (renderedPages.has(i)) continue;
    renderedPages.add(i);

    const page = await pdf.getPage(i);
    const scale = 1;
    const viewport = page.getViewport({ scale });

    const canvas = document.createElement("canvas");
    const context = canvas.getContext("2d");

    canvas.width = viewport.width;
    canvas.height = viewport.height;
    canvas.style.display = "none"; // –ü—Ä—è—á–µ–º –ø–µ—Ä–µ–¥ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–æ–º

    canvasContainer.appendChild(canvas);

    await page.render({ canvasContext: context, viewport }).promise;

    canvas.style.display = "flex"; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
  }

  setTimeout(() => {
    clearInterval(loadingInterval);
    if(loaderContainer){
      canvasContainer.removeChild(loaderContainer);
    }

    containerCanvas_highlightColor = '#5E5E5E';
    canvasContainer.style.overflowY = "auto";
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ canvas –æ–±—Ä–∞—Ç–Ω–æ
    Array.from(canvasContainer.getElementsByTagName("canvas")).forEach(c => c.style.display = "flex");

    
    const hourglassHalf = document.querySelector('.textAreaDashboard > i.fa-hourglass-half')
    if(hourglassHalf){
      hourglassHalf.remove()
    }
    
    const dashboardInfoText = document.querySelector('p.dashboardInfoText');
    if (dashboardInfoText) {
      dashboardInfoText.classList.remove("generating")
    }

    // –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    const endTime = Date.now();
    const renderDuration = endTime - startTime; // –í—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    document.querySelector("span#generationTime").innerText = `‚Ä¢ ${renderDuration}–º—Å`
    if(statusFinishIcon){
      statusFinishIcon.remove()
    }
    const textAreaDashboard = document.querySelector(".textAreaDashboard");
    if (textAreaDashboard) {
      const isIconShowed = document.querySelector("i.fa-check")
      if(isIconShowed){
        isIconShowed.remove()
        const statusDone = document.createElement("i");
        statusDone.classList.add("fa-solid","fa-check")
        textAreaDashboard.insertBefore(statusDone, textAreaDashboard.firstChild);
        let pdfPrint = document.querySelector("a.pdfPrint");
        if (pdfPrint && pdfPrint.href) {
          localBlob = pdfPrint.href.split("/").pop();
          document.querySelector('.dashboardInfoText').innerText = localBlob
        }    
      }else{
        const statusDone = document.createElement("i");
        statusDone.classList.add("fa-solid","fa-check")
        textAreaDashboard.insertBefore(statusDone, textAreaDashboard.firstChild);
        let pdfPrint = document.querySelector("a.pdfPrint");
        if (pdfPrint && pdfPrint.href) {
          localBlob = pdfPrint.href.split("/").pop();
          document.querySelector('.dashboardInfoText').innerText = localBlob
        }    
      }
  
    }
  }, 1000);
}

//!END 

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
function generatePreview() {
  generatePDF()
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF
document.querySelectorAll("input, select").forEach(input => {
  input.addEventListener("input", (event) => {
    if (!document.getElementById("calendar").contains(event.target)) {
      throttledGeneratePreview();
    }
  });
});

document.querySelectorAll(".no-cargo").forEach(button => {
  button.addEventListener("click", throttledGeneratePreview);
});

const targetNode = document.getElementById("dateDisplay");
const observer = new MutationObserver(throttledGeneratePreview);
observer.observe(targetNode, { childList: true, characterData: true, subtree: true });

getDateToday()
generatePreview()